import { Component, OnInit } from '@angular/core';
import { FormArray,FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { ToastrService } from 'ngx-toastr';
import { ErrorHandler } from '../../error/error.handler';
import { ActivatedRoute, Router } from '@angular/router';
import { forkJoin, Observable } from 'rxjs';
import { InitiateDueDiligenceService } from '../../services/initiate-due-diligence/initiate-due-diligence.service';

@Component({
  selector: 'app-due-diligence-page',
  templateUrl: './due-diligence-page.component.html',
  styleUrls: ['./due-diligence-page.component.scss']
})
export class dueDiligencePageComponent implements OnInit {
  
  initiateDueDiligenceForm: FormGroup;
  pageErrors: any = {};
  isError: boolean = false;
  isSuccess: boolean = false;
  errorMessage = '';
  search: boolean = true;
  isChecked: boolean = false;
  searchResults: boolean = false;
  status: string = "Inactive";
  selectedUnit: any;
  panelOpenState: boolean = false;
  totalCoapplicants: number = 2;
  totalGuarantors: number = 3;
  headerKey = '';
  isNonM1Module: boolean = false;

  autoGeneratedDetailsForm: FormGroup;
  administrativeDetailsForm: FormGroup;
  generalInformationForm: FormGroup;
  CGSDetailsForm: FormGroup;
  assessmentForm: FormGroup;
  recommendationsForm: FormGroup;

  constructor(private formBuilder: FormBuilder,
    private errorHandler: ErrorHandler, private slideToggle: MatSlideToggleModule,
    private activatedroute: ActivatedRoute,private initiateDueDiligenceService: InitiateDueDiligenceService,
    private toastr: ToastrService, private router: Router) {
      this.headerKey = this.activatedroute.snapshot.paramMap.get("headerKey");
  }

  ngOnInit(): void {
    var arrModule = this.headerKey.split('_');
    console.log('Module == '+arrModule[0]);
    this.initiateDueDiligenceForm = this.formBuilder.group({
      selectModuleA: [''],
      selectModuleB: [''],
      loanApplnNumber: [''],
      loanApplnDate: [''],
      cifNumberAvailability: [''],
      cifNumber: [''],
      applicantName: [''],
      selectCreditSector: [''],
      selectLoanAccNumber: [''],
      selectLoanScheme: [''],
      selectLoanVariant: [''],
      selecte2e: [''],
      assignBranchMaker: [''],
      assignBranchChecker: [''],
      comments: ['']
    });
    this.autoGeneratedDetailsForm = this.formBuilder.group({
      e2eNumber: [''],
      e2eDate: [''],
      e2eM3StartDate: [''],
      e2eM4StartDate: [''],
      e2eM4ReviewNumber: [''],
      e2eM4ReviewDate: [''],
      e2eM5ReleaseNumber: [''],
      e2eM5Date: [''],
      branchName: [''],
      branchIFSC: ['']
    });
    this.administrativeDetailsForm = this.formBuilder.group({
      assignBranchMaker: [''],
      assignBranchChecker: [''],
      assignAuditControllingAuthority: [''],
      assignLoanSanctioningAuthority: [''],
      M1Processing: [''],
      periodicReviews: ['']
    });
    this.generalInformationForm = this.formBuilder.group({
      cifNumberAvailability: [''],
      loanApplnNumber2: [''],
      loanApplnDate2: [''],
      cifNumberAvailability2: [''],
      selectCifNumber2: [''],
      applicantName2: [''],
      selectCreditSector2: [''],
      selectExistingLoanNumber: [''],
      selectLoanScheme2: [''],
      selectLoanVariant2: [''],
      selecte2eLoanAcc: [''],
      loanAccNumber: [''],
      acceptanceDate: [''],
      sanctionedLoanAmount: [''],
      sanctionedLoanAmountWords: [''],
      loanTenure2: [''],
      revisedLoanTenure2: [''],
      disbursementDate: [''],
      reviewSanctionDate: [''],
      presentStatus: [''],
      releaseSecurity: [''],
      releaseSecurityDate: [''],
      accountType: [''],
      borrowerType: [''],
      borrowerCategory: ['']
    });
    this.CGSDetailsForm = this.formBuilder.group({
      loanSecurity: [''],
      securityType: [''],
      movableSecurityTypesList: [''],
      comments2: ['']
    });
    this.assessmentForm = this.formBuilder.group({
      cifNumberAvailability: [''],
      loanSecurity: [''],
      securityType: [''],
      applicantAddress: [''],
      applicantDOB: [''],
      applicantCIBILScore: [''],
      applicantAadhar: [''],
      applicantPAN: [''],
      applicantKYC1: [''],
      applicantKYC2: [''],
      immovableProperty: [''],
      immovablePropertyAddress: [''],
      advocateName: [''],
      legalOpinionDate: [''],
      valuerName: [''],
      valuationDate: [''],
      asssessedValue: [''],
      constructionCost: [''],
      staffVisitDate: [''],
      dueDeligenceDetails: this.formBuilder.array([
        this.getExistingDueDeligence()
      ])
    });
    
    this.recommendationsForm = this.formBuilder.group({
      loanLimit: [''],
      ROI: [''],
      holidayPeriod: [''],
      repaymentTenure: [''],
      repaymentTenure2: [''],
      advanceClassification: [''],
      comments1: [''],
      comments2: [''],
      comments3: [''],
      comments4: [''],
      comments5: ['']
    });
    this.isError = false;
    let getDueDeligenceServiceCalls: Observable<any>[] = [];
    getDueDeligenceServiceCalls.push(this.initiateDueDiligenceService.getListOfDueDeligenceAsPerHeader(this.headerKey));
    var arr = this.headerKey.split('_');
    if(arr[0]=='M1')
	  	this.isNonM1Module = false;
	else
	    this.isNonM1Module = true;

    forkJoin(getDueDeligenceServiceCalls).subscribe(results => {
        if (results[0] && results[0].data && results[0].data.length > 0) {
          let dueDeligenceData = results[0].data;
          console.log("dueDeligenceData : ", dueDeligenceData);
          (this.assessmentForm.get('dueDeligenceDetails') as FormArray).clear();

          dueDeligenceData.forEach((eachDueDeligenceData: any) => {
            const dueDeligenceDetailsControl = this.getExistingDueDeligence();

            dueDeligenceDetailsControl.setValue({
              ddSequence: eachDueDeligenceData.ddSequence,
		      ddData :eachDueDeligenceData.ddData,
		      schmemaNormColor:SchmemaNormColor,
		      applicantColor:cpplicantColor,
		      coapplicantcolor:eachDueDeligenceData.coapplicantcolor,
		      coapplicant1color:eachDueDeligenceData.coapplicant1color,
		      coapplicant2color:eachDueDeligenceData.coapplicant2color,
		      coapplicant3color:eachDueDeligenceData.coapplicant3color,
		      coapplicant4color:eachDueDeligenceData.coapplicant4color,
		      guarantorcolor:eachDueDeligenceData.guarantorcolor,
		      guarantor1color:eachDueDeligenceData.guarantor1color,
		      guarantor2color:eachDueDeligenceData.guarantor2color,
		      guarantor3color:eachDueDeligenceData.guarantor3color,
		      guarantor4color:eachDueDeligenceData.guarantor4color,
		      schmemaNormPlaceHolderValues :eachDueDeligenceData.schmemaNormPlaceHolderValues,
		      schmemaNormUiValidValue :eachDueDeligenceData.schmemaNormUiValidValue,
		      applicantPlaceHolderValues:eachDueDeligenceData.applicantPlaceHolderValues,
		      applicantUiValidValue :eachDueDeligenceData.applicantUiValidValue,
		      coapplicantplaceholdervalues :eachDueDeligenceData.coapplicantplaceholdervalues,
		      coapplicantuivalidvalue :eachDueDeligenceData.coapplicantuivalidvalue,
		      coapplicant1placeholdervalues :eachDueDeligenceData.coapplicant1placeholdervalues,
		      coapplicant1uivalidvalue :eachDueDeligenceData.coapplicant1uivalidvalue,
		      coapplicant2placeholdervalues :eachDueDeligenceData.coapplicant2placeholdervalues,
		      coapplicant2uivalidvalue :eachDueDeligenceData.coapplicant2uivalidvalue,
		      coapplicant3placeholdervalues :eachDueDeligenceData.coapplicant3placeholdervalues,
		      coapplicant3uivalidvalue :eachDueDeligenceData.coapplicant3uivalidvalue,
		      coapplicant4placeholdervalues :eachDueDeligenceData.coapplicant4placeholdervalues,
		      coapplicant4uivalidvalue :eachDueDeligenceData.coapplicant4uivalidvalue,
		      guarantorplaceholdervalues:eachDueDeligenceData.guarantorplaceholdervalues,
		      guarantoruivalidvalue:eachDueDeligenceData.guarantoruivalidvalue,
		      guarantor1placeholdervalues:eachDueDeligenceData.guarantor1placeholdervalues,
		      guarantor1uivalidvalue:eachDueDeligenceData.guarantor1uivalidvalue,
		      guarantor2placeholdervalues:eachDueDeligenceData.guarantor2placeholdervalues,
		      guarantor2uivalidvalue:eachDueDeligenceData.guarantor2uivalidvalue,
		      guarantor3placeholdervalues:eachDueDeligenceData.guarantor3placeholdervalues,
		      guarantor3uivalidvalue:eachDueDeligenceData.guarantor3uivalidvalue,
		      guarantor4placeholdervalues:eachDueDeligenceData.guarantor4placeholdervalues,
		      guarantor4uivalidvalue:eachDueDeligenceData.guarantor4uivalidvalue
            })

            this.addThisDueDeligenceDetails(dueDeligenceDetailsControl);
          });
        } else {
	        this.errorMessage = "No due deligience configured";
	        this.isError = true;
        }
    },
      err => {
        this.errorMessage = err.errorMessage;
        this.isError = true;
      });
  }
  getExistingDueDeligence() {
    return this.formBuilder.group({
      ddSequence: [''] ,
      ddData :[''],
      schmemaNormPlaceHolderValues :[''],
      schmemaNormUiValidValue :[''],
      applicantPlaceHolderValues:[''],
      applicantUiValidValue :[''],
      coapplicantplaceholdervalues :[''],
      coapplicantuivalidvalue :[''],
      coapplicant1placeholdervalues :[''],
      coapplicant1uivalidvalue :[''],
      coapplicant2placeholdervalues :[''],
      coapplicant2uivalidvalue :[''],
      coapplicant3placeholdervalues :[''],
      coapplicant3uivalidvalue :[''],
      coapplicant4placeholdervalues :[''],
      coapplicant4uivalidvalue :[''],
      guarantorplaceholdervalues:[''],
      guarantoruivalidvalue:[''],
      guarantor1placeholdervalues:[''],
      guarantor1uivalidvalue:[''],
      guarantor2placeholdervalues:[''],
      guarantor2uivalidvalue:[''],
      guarantor3placeholdervalues:[''],
      guarantor3uivalidvalue:[''],
      guarantor4placeholdervalues:[''],
      guarantor4uivalidvalue:[''],
      coapplicantcolor:[''],
      coapplicant1color:[''],
      coapplicant2color:[''],
      coapplicant3color:[''],
      coapplicant4color:[''],
      guarantorcolor:[''],
      guarantor1color:[''],
      guarantor2color:[''],
      guarantor3color:[''],
      guarantor4color:['']
    });
  }
  getDueDeligenceArrayControl() {
    return (this.assessmentForm.get('dueDeligenceDetails') as FormArray).controls;
  }

  addThisDueDeligenceDetails(formGroup: FormGroup) {
    const control = <FormArray>this.assessmentForm.controls['dueDeligenceDetails'];
    //console.log('formGroup  :::::',formGroup);
    control.push(formGroup);
  }

  // add new row
  /*addDueDeligence() {
    this.clearAllErrors();
    const control = <FormArray>this.assessmentForm.controls['dueDeligenceDetails'];
    var arr = this.headerKey.split('_');
    const dueDeligenceDetailsControl = this.getExistingDueDeligence();
    this.dueDeligenceService.getNewDeligence(arr[2]).subscribe(result=>{
	    console.log("result",result.data);
	    dueDeligenceDetailsControl.setValue({
              ddSequence: result.data,
              ddParentSequence: '',
              headerSequence: '',
              ddData : '',
              generalOption :'',
              applicantOption :'',
              coApplicantOption :'',
              guarantorOption:'',
              complianceOption:'',
              conditions :'',
              creditSectorId :'',
              loanSchemeId :'',
              loanVariant_keyword :'',
              borrowerTypeId :'',
              criticaltyFactor :'',
              professionId :'',
              loanApplicationTypeId :'',
              securityId :'',
              securityTypeId :'',
              applicationTypeId :'',
              assetTypeId :'',
              remarks: ''
        })

        this.addThisDueDeligenceDetails(dueDeligenceDetailsControl);
	  },
	  err => {
	    this.errorMessage = err.error.errorMessage;
        this.isError = true;
	  });
    //control.push(dueDeligenceDetailsControl);
  }*/
  
  viewReport() {
    this.router.navigate(['home', {
      outlets: {
        appcontent: ['due-diligence-non-compliant']
      }
    }]);
  }
  back() {
    console.log("Back to Headers");
    this.router.navigate(['home', {
      outlets: {
        appcontent: ['view-due-diligence']
      }
    }]);
  }
  
  clearAllErrors() {
    this.errorMessage = "";
  }
}