import { Component, OnInit, Inject, ViewChild } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { ToastrService } from 'ngx-toastr';
import { ErrorHandler } from '../../error/error.handler';
import { ActivatedRoute, Router } from '@angular/router';
import { forkJoin, Observable } from 'rxjs';
import { InitiateDueDiligenceService } from '../../services/initiate-due-diligence/initiate-due-diligence.service';
import { AuthService } from '../../services/auth-service/auth.service';
import { MatStepper } from '@angular/material/stepper';
import { StepperSelectionEvent } from '@angular/cdk/stepper';

@Component({
  selector: 'app-initiate-due-diligence',
  templateUrl: './initiate-due-diligence.component.html',
  styleUrls: ['./initiate-due-diligence.component.scss']
})
export class initiateDueDiligenceComponent implements OnInit {

  initiateDueDiligenceForm: FormGroup;
  pageErrors: any = {};
  isError: boolean = false;
  isSuccess: boolean = false;
  errorMessage = '';
  search: boolean = true;
  isE2EPresent: boolean = false;
  isGeneralInfoLoad: boolean = false;
  isCoAppInfoLoad: boolean = false;
  isChecked: boolean = false;
  searchResults: boolean = false;
  status: string = "Inactive";
  selectedUnit: any;
  panelOpenState: boolean = false;
  e2e: any;
  clientId: any;
  clientGroupId: any;
  clientName: any;
  cifOptions: any = [];
  loanSchemeOptions: any = [];
  loanVariantOptions: any = [];
  branchMakerOptions: any = [];
  unitCheckerOptions: any = [];
  accountTypeOptions: any = [];
  borrowerTypeOptions: any = [];
  borrowerCategoryOptions: any = [];
  moveAblePropertiesOptions: any = [];
  availableDesignationOptions: any = [];
  facilityOptions: any = [];
  autoGeneratedDetailsForm: FormGroup;
  administrativeDetailsForm: FormGroup;
  generalInformationForm: FormGroup;
  CGSDetailsForm: FormGroup;
  assessmentForm: FormGroup;
  recommendationsForm: FormGroup;
  isCollateral:boolean=false;
  isCollateralTypeSelected:boolean=false;
  isLoanSchemeEnabled:boolean=false;
  loanVariantOptionFiltered: any=[];
  isCifYes:boolean=true;
  isApplicantNameEnabled:boolean=true;
  isCifNumChanged:boolean=false;
  isCreditSectorCommerical:boolean = false;

  @ViewChild('stepper') private clientStepper: MatStepper;
  constructor(private formBuilder: FormBuilder, private router: Router,
    private errorHandler: ErrorHandler, private slideToggle: MatSlideToggleModule, private authService: AuthService,
    private initiateDueDiligenceService: InitiateDueDiligenceService,
    private activatedroute: ActivatedRoute,
    private toastrService: ToastrService) {
    this.e2e = this.activatedroute.snapshot.paramMap.get("e2e");
    if (this.e2e != null && this.e2e != 'null' && this.e2e != 'undefined' && this.e2e != 'new') {
      this.isE2EPresent = true;
    }
  }

  ngOnInit(): void {


    this.initiateDueDiligenceForm = this.formBuilder.group({
      dueDeligenceOfNewApp: [''],
      selectModuleB: [''],
      loanAppNum: [''],
      loanAppDate: [''],
      availabilityOfCifNum: [''],
      cifNum: [''],
      boorrowerName: [''],
      selectCreditSector: [''],
      selectLoanAccNumber: [''],
      selectLoanScheme: [''],
      selectLoanVariant: [''],
      assignBranchMaker: [''],
      selecte2e: [''],
      assignUnitMaker: [''],
      assignUnitChecker: [''],
      comments: [''],
      loanStatus: []
    });
    this.autoGeneratedDetailsForm = this.formBuilder.group({
      e2eno: [''],
      e2edate: [''],
      e2em3expectedstartdate: [''],
      e2em4expectedstartdate: [''],
      e2em4reviewno: [''],
      e2em4reviewdate: [''],
      e2em5securityreleasenumber: [''],
      e2em5date: [''],
      branchName: [''],
      ifsccode: ['']
    });
    this.administrativeDetailsForm = this.formBuilder.group({
      assignUnitMaker: [''],
      unitChecker: [''],
      unitSanctionAuthority: [''],
      loanSanctionAuthority: [''],
      numReviewsCompleted: ['']
    });
    this.generalInformationForm = this.formBuilder.group({
      loanAccountNo: [''],
      loanApplnNumber2: [''],
      loanApplnDate2: [''],
      cifNumberAvailability2: [''],
      selectCifNumber2: [''],
      applicantName2: [''],
      selectCreditSector2: [''],
      selectExistingLoanNumber: [''],
      selectLoanScheme2: [''],
      selectLoanVariant2: [''],
      selecte2eLoanAcc: [''],
      acceptanceDate: [''],
      sanctionedLoanAmount: [''],
      sanctionedLoanAmountWords: [''],
      loanTenure2: [''],
      revisedLoanTenure2: [''],
      disbursementDate: [''],
      m4CurrentReviewSanctionDate: [''],
      presentStatus: [''],  //it considered as asset_type_id in DB
      releaseOfSecurityOnAccountClosure: [''],
      dateOfClosureOfLoan: [''],
      selectedAccountType: [''],
      selectedBorrowerType: [''],
      selectedBorrowerCategory: [''],
      commercialCreditFacilityDetails: this.formBuilder.array([
        this.getCommercialCreditFacilityData()
      ])
    });
    this.CGSDetailsForm = this.formBuilder.group({
      facility: [''],
      accountNum: [''],
      dateOfSanction: [''],
      sanctionedLimit: [''],
      sanctionedLimitWords: [''],
      loanTenor: [''],
      coapplicantName: [''],
      coappDesignation: [''],
      coapplicantName1: [''],
      coappDesignation1: [''],
      coapplicantName2: [''],
      coappDesignation2: [''],
      coapplicantName3: [''],
      coappDesignation3: [''],
      coapplicantName4: [''],
      coappDesignation4: [''],
      guarantorName: [''],
      guarantorName1: [''],
      guarantorName2: [''],
      guarantorName3: [''],
      guarantorName4: [''],
      loanSecurity: [''],
      securityType: [''],
      comments2: [''],
      moveAbleProperties: ['']
    });
    this.assessmentForm = this.formBuilder.group({
      cifNumberAvailability: [''],
      loanSecurity: [''],
      securityType: [''],
      applicantAddress: [''],
      applicantDOB: [''],
      applicantCIBILScore: [''],
      applicantAadhar: [''],
      applicantPAN: [''],
      applicantKYC1: [''],
      applicantKYC2: [''],
      immovableProperty: [''],
      immovablePropertyAddress: [''],
      advocateName: [''],
      legalOpinionDate: [''],
      valuerName: [''],
      valuationDate: [''],
      asssessedValue: [''],
      constructionCost: [''],
      staffVisitDate: ['']
    });
    this.recommendationsForm = this.formBuilder.group({
      loanLimit: [''],
      ROI: [''],
      holidayPeriod: [''],
      repaymentTenure: [''],
      repaymentTenure2: [''],
      advanceClassification: [''],
      comments1: [''],
      comments2: [''],
      comments3: [''],
      comments4: [''],
      comments5: ['']
    });
    //this.CGSDetailsForm = this.formBuilder.group({
    //  CoApplicantDetails: this.formBuilder.array([
    //    this.getCoApplicantData()
    //  ])
    //});

    //this.generalInformationForm = this.formBuilder.group({
    //  CommercialCreditFacilityDetails: this.formBuilder.array([
    //    this.getCommercialCreditFacilityData()
    //  ])
    //});

    this.fetchUserData();
    //this.registerValues();
    this.registerValueChanges();
    console.log('e2e=====' + this.e2e);
    if (this.e2e != null && this.e2e != 'null' && this.e2e != 'undefined' && this.e2e != 'new') {
      this.isE2EPresent = true;
      this.loadDueDiligenceDetails(this.e2e);
    }

    if (this.initiateDueDiligenceForm.get('loanAppNum').value != '' && this.initiateDueDiligenceForm.get('loanAppNum').value != null && this.initiateDueDiligenceForm.get('loanAppNum').value != 'undefined') {
      this.loadAutoGenerateDetails();
    }
  }
  getCoApplicantData() {
    return this.formBuilder.group({
      coapplicantName: [''],
      coappDesignation: [''],
      coapplicantName1: [''],
      coappDesignation1: [''],
      coapplicantName2: [''],
      coappDesignation2: [''],
      coapplicantName3: [''],
      coappDesignation3: [''],
      coapplicantName4: [''],
      coappDesignation4: ['']
    });
  }

  /* addCoApplicantDetails(formGroup :FormGroup) {
    const control = <FormArray>this.CGSDetailsForm.controls['CoApplicantDetails'];
    control.push(formGroup);
  }
  getAvailableCoApplicantControl() {
    return (this.CGSDetailsForm.get('CoApplicantDetails') as FormArray).controls;
  } */

  /* getGurantorData() {
    return this.formBuilder.group({
      selectedGurantor :[''],
      guarantorName: [''],
      guarantorDesc: ['']
    });
  } */

  /* addGurantorDetails(formGroup :FormGroup) {
    const control = <FormArray>this.CGSDetailsForm.controls['GurantorDetails'];
    control.push(formGroup);
  }
  getAvailableGuarantorControl() {
    return (this.CGSDetailsForm.get('GurantorDetails') as FormArray).controls;
  } */


  getCommercialCreditFacilityData() {
    return this.formBuilder.group({
      facility: [''],
      accountNum: [''],
      dateOfSanction: [''],
      sanctionedLimit: [''],
      sanctionedLimitWords: [''],
      loanTenor: ['']
    });
  }

  removeCommercialCreditFacility(i: number) {
    const control = <FormArray>this.generalInformationForm.controls['commercialCreditFacilityDetails'];
    //let reqData: any;
    //reqData = {
    //  clientId: this.clientId,
    //  clientTypeId: this.clientTypeId, 
    //  clientGroupId: clentGroupId
    //}


    //let commercialFacilityDetailsArr = [];
    //commercialFacilityDetailsArr.push(commercialFacilityDetails);
    //reqData.CommercialCreditFacilityDetails = commercialFacilityDetailsArr;

    //this.clientConfigurationService.deleteLoanSchemeVariantInfo(reqData).subscribe(result=>{
    //  this.toastrService.success('Loan Variant deleted successfully', 'Information', {
    //    timeOut: 3000,
    //  });
    //},
    //err => {
    //  console.log("err",err);  
    //  this.toastrService.error('Unable to delete loan variant', 'Information', {
    //    timeOut: 3000,
    //  });      
    //});
    control.removeAt(i);

  }

  addCommercialCreditFacilityDetails() {
    const control = <FormArray>this.generalInformationForm.controls['commercialCreditFacilityDetails'];
    control.push(this.getCommercialCreditFacilityData());
  }
  addCommercialCreditFacilityDetail(formGroup: FormGroup) {
    const control = <FormArray>this.generalInformationForm.controls['commercialCreditFacilityDetails'];
    control.push(formGroup);
  }
  getCommercialCreditFacilityArrayControl() {
    return (this.generalInformationForm.get('commercialCreditFacilityDetails') as FormArray).controls;
  }

  fetchUserData() {
    var clntId = '';
    forkJoin([this.authService.getUserInfo()])
      .subscribe(results => {
        console.log('User Info :' + results[0].data);
        if (results[0] && results[0].data) {
          console.log('User Info :', results[0].data);
          this.clientId = results[0].data.clientId;
          this.clientName = results[0].data.clientName;
          this.clientGroupId = results[0].data.clientGroupId;
        }
        //alert(this.clientId);
        //alert(this.clientGroupId);
        this.loadDropdown(this.clientId, this.clientGroupId);
        //this.loadDropdown(1113,10056);
      });

  }

  loadDropdown(clientId, clientGroupId) {
    this.initiateDueDiligenceService.getListOfCifDetails(clientId).subscribe(results => {
      console.log("results :: loaded cif details", results);
      if (results && results.data) {
        this.cifOptions = results.data;
      }

    });
    if(this.initiateDueDiligenceForm.get("selectCreditSector")!=null && 
    this.initiateDueDiligenceForm.get("selectCreditSector").value!='undefined' && this.initiateDueDiligenceForm.get("selectCreditSector").value!='null') {
	    this.initiateDueDiligenceService.getListOfLoanSchemes('NonAudit', -1, this.initiateDueDiligenceForm.get("selectCreditSector").value, clientId).subscribe(results => {
	      console.log("results :: loaded loan schemes", results);
	      if (results && results.data) {
	        this.loanSchemeOptions = results.data;
	      }
	
	    });
    }
    this.initiateDueDiligenceService.getListOfLoanVariants('NonAudit', -1, clientId).subscribe(results => {
      console.log("results :: loaded loan variants", results);
      if (results && results.data) {
        this.loanVariantOptions = results.data;
      }

    });

    this.initiateDueDiligenceService.getListOfBranchMakers(clientGroupId).subscribe(results => {
      console.log("results :: loaded branch makers", results);
      if (results && results.data) {
        this.branchMakerOptions = results.data;
      }

    });
    this.initiateDueDiligenceService.getUnitChecker(clientGroupId).subscribe(results => {
      console.log("results :: loaded unit checkers", results);
      if (results && results.data) {
        this.unitCheckerOptions = results.data;
      }

    });
    this.initiateDueDiligenceService.getListOfAccountTypes().subscribe(results => {
      console.log("results :: loaded account type", results);
      if (results && results.data) {
        this.accountTypeOptions = results.data;
      }

    });
    this.initiateDueDiligenceService.getListOfBorrowerTypes().subscribe(results => {
      console.log("results :: loaded borrower type", results);
      if (results && results.data) {
        this.borrowerTypeOptions = results.data;
      }

    });
    this.initiateDueDiligenceService.getListOfBorrowerCategory().subscribe(results => {
      console.log("results :: loaded borrower category", results);
      if (results && results.data) {
        this.borrowerCategoryOptions = results.data;
      }

    });
    this.initiateDueDiligenceService.getListOfCoApplicantDesignation().subscribe(results => {
      console.log("results of coApp designation", results);
      if (results && results.data) {
        this.availableDesignationOptions = results.data;
      }

    });

    this.initiateDueDiligenceService.getListOfMovableProperties().subscribe(results => {
      console.log("results :: loaded moveable properties", results);
      if (results && results.data) {
        if (results && results.data) {
          this.moveAblePropertiesOptions = results.data;
          // this.moveAblePropertiesOptions.propertyId = results.data.propertyId;
          // this.moveAblePropertiesOptions.propertyName = results.data.propertyName;
          // this.moveAblePropertiesOptions.checked = results.data.checked;
        }
      }
    });

  }

  registerValueChanges() {
    this.initiateDueDiligenceForm.get('selectLoanScheme').valueChanges.subscribe(value => {
      if (value && value != undefined) {
        this.initiateDueDiligenceService.getListOfLoanSchemeFacilities(value)
          .subscribe(results => {
            console.log("results facilityOptions", results);
            if (results && results.data) {
              this.facilityOptions = results.data;
            }
          });
      }
    });
  }
  viewDD() {
    this.router.navigate(['home', {
      outlets: {
        //appcontent: ['view-due-diligence', this.initiateDueDiligenceForm.get('dueDeligenceOfNewApp').value, this.initiateDueDiligenceForm.get('loanAppNum').value]
        appcontent: ['view-due-diligence', this.initiateDueDiligenceForm.get('loanStatus').value, this.initiateDueDiligenceForm.get('loanAppNum').value]
      }
    }]);
  }
  viewSummary() {
    this.router.navigate(['home', {
      outlets: {
        appcontent: ['due-diligence-non-compliant', this.e2e]
      }
    }]);
  }
  clearAllErrors() {
    this.isError = false;
    this.errorMessage = "";
  }
  performSubmit() {
    console.log('performSubmit:isCifNumChanged:'+this.isCifNumChanged);
    this.clearAllErrors();
    console.log('this.initiateDueDiligenceForm:' + this.initiateDueDiligenceForm);
    let requestData = this.initiateDueDiligenceForm.value;
    
    if(this.isCifNumChanged) {
      requestData.boorrowerName = this.initiateDueDiligenceForm.get('boorrowerName').value[0]; //hot fix
    }
    console.log('requestData ====' + JSON.stringify(requestData));

    this.initiateDueDiligenceService.initiateNewDueDiligence(requestData).subscribe((results: any) => {
      if (!results.metaData.success || !results.data) {
        this.isError = true;
        this.errorMessage = results.metaData.description;
      } else {
        this.toastrService.success('Due Diligence saved successfully', 'Information', {
          timeOut: 3000,
        });
        this.loadAutoGenerateDetails();
      }
    },
      err => {
        this.errorMessage = err.error.errorMessage;
        this.isError = true;
      }
    );
  }
  loadAdministrativeDetails(e2e) {
    if (this.e2e != null && this.e2e != 'undefined' && this.e2e != 'new') {
      this.initiateDueDiligenceService.getDefaultUnitChecker(e2e).subscribe(results => {
        console.log("results :: load administrative details", results);
        if (results && results.data) {
          this.administrativeDetailsForm.patchValue({
            assignUnitMaker: results.data.unitMaker,
            unitChecker: results.data.unitChecker,
            unitSanctionAuthority: results.data.unitSanctionAuthority,
            loanSanctionAuthority: results.data.loanSanctionAuthority,
            numReviewsCompleted: results.data.numberOfReviewsCompleted
          });
        }
      });
    }
  }

  loadDueDiligenceDetails(e2e) {
    let requestData = {
      e2eNumber: e2e
    };
    this.initiateDueDiligenceService.getListOfDueDiligence(requestData).subscribe(results => {
      console.log("results :: load due diligence", results);
      if (results && results.data) {
        if(results.data.creditSectorTypeId !=null){
            this.initiateDueDiligenceService.getListOfLoanSchemes('NonAudit', -1, results.data.creditSectorTypeId, this.clientId).subscribe(results => {
		      console.log("results :: loaded loan schemes", results);
		      if (results && results.data) {
		        this.loanSchemeOptions = results.data;
		      }
		    });
        }
        this.initiateDueDiligenceForm.patchValue({
          dueDeligenceOfNewApp: results.data.startModule,
          loanAppNum: results.data.loanApplicationNo,
          loanAppDate: results.data.loanApplicationDate,
          availabilityOfCifNum: results.data.cifFlag,
          cifNum: results.data.cifNo,
          boorrowerName: results.data.loanApplicantName,
          selectCreditSector: results.data.creditSectorTypeId,
          selectLoanScheme: results.data.loanSchemeId,
          selectLoanVariant: results.data.loanVariantId,
          assignBranchMaker: results.data.unitMaker,
          comments: results.data.initiateDdpComments,
          loanStatus: results.data.loanStatus
        });
        if(this.initiateDueDiligenceForm.get('availabilityOfCifNum').value != '' && 
        this.initiateDueDiligenceForm.get('availabilityOfCifNum').value != null && 
        this.initiateDueDiligenceForm.get('availabilityOfCifNum').value != 'undefined' && 
        this.initiateDueDiligenceForm.get('availabilityOfCifNum').value != undefined 
        ) {
          if(this.initiateDueDiligenceForm.get('availabilityOfCifNum').value == 'Y') {
            this.isCifYes = false;
          } else{
            this.isCifYes = true;
            this.initiateDueDiligenceForm.get('cifNum').setValue(null);
          }
        }
        if (this.initiateDueDiligenceForm.get('loanAppNum').value != '' && this.initiateDueDiligenceForm.get('loanAppNum').value != null && this.initiateDueDiligenceForm.get('loanAppNum').value != 'undefined') {
          this.loadAutoGenerateDetails();
        }
        let selectedSchemeId = this.initiateDueDiligenceForm.get('selectLoanScheme').value;
        console.log('loadDueDiligenceDetails:selectedSchemeId:'+selectedSchemeId);
        if (selectedSchemeId != '' && selectedSchemeId != null && selectedSchemeId != 'undefined' && selectedSchemeId !=undefined) {
          this.loanVariantOptionFiltered = this.loanVariantOptions.filter(loanVariant=>loanVariant.loanSchemeId==selectedSchemeId);
          this.isLoanSchemeEnabled=true;
        }
        
        //this.loadAdministrativeDetails(e2e);
        //this.loadGeneralInfoDetails(e2e);
      }
    });
    // let selectedSchemeId = this.initiateDueDiligenceForm.get('selectLoanScheme').value;
    // this.initiateDueDiligenceService.getListOfLoanVariants('Audit', selectedSchemeId, this.clientId).subscribe(results => {
    //   console.log("results :: loaded loan variants filtered", results);
    //   if (results && results.data) {
    //     this.isLoanSchemeEnabled=true;
    //     this.loanVariantOptionFiltered = results.data;
    //   }
    // });
  }
  loadAutoGenerateDetails() {
    if (this.initiateDueDiligenceForm.get('loanAppNum').value != null && this.initiateDueDiligenceForm.get('loanAppNum').value != 'undefined' && this.initiateDueDiligenceForm.get('loanAppNum').value != '') {
      this.initiateDueDiligenceService.getAutoGeneratedResponse(this.initiateDueDiligenceForm.get('loanAppNum').value).subscribe(results => {
        console.log("results :: auto generated details", results);
        if (results && results.data) {
          this.autoGeneratedDetailsForm.patchValue({
            e2eno: results.data.e2eno,
            e2edate: results.data.e2edate,
            e2em3expectedstartdate: results.data.e2em3expectedstartdate,
            e2em4expectedstartdate: results.data.e2em4expectedstartdate,
            e2em4reviewno: results.data.e2em4reviewno,
            e2em4reviewdate: results.data.e2em4reviewdate,
            e2em5securityreleasenumber: results.data.e2em5securityreleasenumber,
            e2em5date: results.data.e2em5date,
            ifsccode: results.data.ifsccode
          });
          this.isE2EPresent = true;
        }
      });
    }
  }

  loadGeneralInfoDetails(e2e) {
    this.isGeneralInfoLoad = true;
    if (this.e2e != null && this.e2e != 'undefined' && this.e2e != 'new') {
      this.initiateDueDiligenceService.getGeneralInfoDetails(e2e).subscribe(results => {
        console.log("results of general info", results);
        if (results && results.data) {
          this.generalInformationForm.patchValue({
            cifNumberAvailability2: results.data.cifFlag,
            selectCifNumber2: results.data.cifNo,
            applicantName2: results.data.loanApplicantName,
            selectCreditSector2: results.data.selectCreditSector2,
            selectLoanScheme2: results.data.loanSchemeId,
            selectLoanVariant2: results.data.loanVariantId,
            loanApplnNumber2: results.data.loanApplnNumber2, //loan account no will be populated by user only
            acceptanceDate: results.data.loanSanctionedDate,
            sanctionedLoanAmount: results.data.sanctionedLoanAmount,
            sanctionedLoanAmountWords: results.data.sanctionedLoanAmountWords,
            loanTenure2: results.data.loanTenure2,
            revisedLoanTenure2: results.data.revisedLoanTenure2,
            disbursementDate: results.data.disbursementDate,
            m4CurrentReviewSanctionDate: results.data.m4CurrentReviewSanctionDate,
            presentStatus: results.data.assetTypeId,
            releaseOfSecurityOnAccountClosure: results.data.releaseOfSecurityOnAccountClosure,
            dateOfClosureOfLoan: results.data.dateOfClosureOfLoan,
            selectedAccountType: results.data.selectedAccountType,
            selectedBorrowerType: results.data.selectedBorrowerType,
            selectedBorrowerCategory: results.data.professionId
          });
          if(results.data.selectCreditSector2!=undefined && results.data.selectCreditSector2!='undefined' &&
          results.data.selectCreditSector2!=null && results.data.selectCreditSector2!='null' &&
          results.data.selectCreditSector2==2) {
            this.isCreditSectorCommerical=true;
          }
        }
      });


    }
    this.loadCommercialCreditFacilities(e2e);
  }

  loadCoApplicantDetails(e2e) {
    this.isCoAppInfoLoad = true;
    this.initiateDueDiligenceService.getCoApplicantDetails(e2e).subscribe(results => {
      console.log("results :: fetched coApp details", results);
      if (results && results.data) {
        this.CGSDetailsForm.patchValue({
          //code changes needed for the designations, currently we are getting the coappDesignation, coappDesignation1 ...
          //as value like 'Salaried', 'Business'
          //requirement is based on the value dropdown will have selected data
          coappDesignation: results.data.coappDesignation,
          coappDesignation1: results.data.coappDesignation1,
          coappDesignation2: results.data.coappDesignation2,
          coappDesignation3: results.data.coappDesignation3,
          coappDesignation4: results.data.coappDesignation4,
          coapplicantName: results.data.coapplicantName,
          coapplicantName1: results.data.coapplicantName1,
          coapplicantName2: results.data.coapplicantName2,
          coapplicantName3: results.data.coapplicantName3,
          coapplicantName4: results.data.coapplicantName4,
          guarantorName: results.data.guarantorName,
          guarantorName1: results.data.guarantorName1,
          guarantorName2: results.data.guarantorName2,
          guarantorName3: results.data.guarantorName3,
          guarantorName4: results.data.guarantorName4,
          loanSecurity: results.data.loanSecurity,
          securityType: results.data.securityType
        });

        if(results.data.loanSecurity=='1'){
          this.isCollateral=true;
        }
        if(results.data.securityType=='1'){
          this.isCollateralTypeSelected=true;
        }
      }
      console.log("resulted :: CGSDetailsForm.value", this.CGSDetailsForm.value);
      // if (results && results.data && results.data.length > 0) {
      //   let coAppArrData = results.data;
      //   (this.CGSDetailsForm.get('CoApplicantDetails') as FormArray).clear();
      //   coAppArrData.forEach((eachData: any) => {
      //     const coAppControl = this.getCoApplicantData();
      //     coAppControl.patchValue({
      //       selectedCoApplicant: eachData.selectedCoApplicant,
      //       profile: eachData.profile,
      //       coapplicantName: eachData.coapplicantName,
      //       coappDesignation: eachData.coappDesignation
      //     })
      //     //this.addCoApplicantDetails(coAppControl);
      //   });
      // }
    });
    /*this.initiateDueDiligenceService.getGurantorDetails(e2e).subscribe(results => {
     console.log("Gurantor results :", results);
     if (results && results.data && results.data.length > 0) {
       let gurantorArrData = results.data;
       (this.CGSDetailsForm.get('GurantorDetails') as FormArray).clear();
       gurantorArrData.forEach((eachData: any) => {
         const gurantorControl = this.getGurantorData();
         gurantorControl.patchValue({
           selectedGurantor: eachData.selectedGurantor,
           guarantorName: eachData.guarantorName,
           guarantorDesc: eachData.guarantorDesc
         })
         this.addGurantorDetails(gurantorControl);
       }); 
     }
   });
   if (this.e2e != null && this.e2e != 'undefined' && this.e2e != 'new') {
     this.initiateDueDiligenceService.getCollateralSecurity(e2e).subscribe(results => {
       //console.log("results", results);
       if (results && results.data) {
         this.CGSDetailsForm.patchValue({
           loanSecurity: results.data.securityid,
           securityType: results.data.securitytypeid
         });
       }
     });
   }*/

    this.initiateDueDiligenceService.getListOfMovablePropertiesByE2ENo(e2e).subscribe(results => {
      console.log("results :: fetched moveable properties", results);
      if (results && results.data) {
        this.moveAblePropertiesOptions = results.data;
      }
    });
  }

  loadCommercialCreditFacilities(e2e) {
    this.initiateDueDiligenceService.getListOfCommercialCreditFacilities(e2e).subscribe(results => {
      console.log("results :: load commercial facilities", results);
      if (results && results.data && results.data.length > 0) {
        let commercialFacilityArrData = results.data;
        (this.generalInformationForm.get('commercialCreditFacilityDetails') as FormArray).clear();
        commercialFacilityArrData.forEach((eachData: any) => {
          const commercialFacilityControl = this.getCommercialCreditFacilityData();
          commercialFacilityControl.patchValue({
            facility: eachData.facility,
            accountNum: eachData.accountNum,
            dateOfSanction: eachData.dateOfSanction,
            sanctionedLimit: eachData.sanctionedLimit,
            sanctionedLimitWords: eachData.sanctionedLimitWords,
            loanTenor: eachData.loanTenor

          })
          this.addCommercialCreditFacilityDetail(commercialFacilityControl);
        });
      }
    });
  }

  performAutoGeneratedSubmit() {
    this.clearAllErrors();
    let requestData = this.autoGeneratedDetailsForm.value;
    if (this.e2e != null && this.e2e != 'undefined' && this.e2e != 'new') {
      this.loadAdministrativeDetails(this.e2e);
    } else {
      this.e2e = this.autoGeneratedDetailsForm.get('e2eno').value;
      this.loadAdministrativeDetails(this.e2e);
    }
    this.clientStepper.next();
  }
  performAdministrativeDetailSubmit() {
    this.clearAllErrors();
    let requestData = this.administrativeDetailsForm.value;
    console.log("requestData :: administartive submit", requestData);
    requestData.e2eNumber = this.e2e;

    if (requestData.loanSanctionAuthority == undefined || requestData.loanSanctionAuthority == null || requestData.loanSanctionAuthority == '') {
      console.log("performAdministrativeDetailSubmit:sanction authority not provided: value:",requestData.loanSanctionAuthority);
      this.errorMessage = 'Loan Sanctioning Authority is required';
      this.isError = true;
    } else {
      this.errorMessage = '';
      this.isError = false;
      this.initiateDueDiligenceService.saveAdminitrativeDetails(requestData).subscribe((results: any) => {
        //console.log("results", results);
        if (!results.metaData.success) {
          this.isError = true;
          this.errorMessage = results.metaData.description;
        } else {
          this.toastrService.success('Administrative details saved successfully', 'Information', {
            timeOut: 3000,
          });
          //if(this.e2e !=null && this.e2e !='undefined' && this.e2e !='new') {
          //	this.loadGeneralInfoDetails(this.e2e);
          //}
          this.clientStepper.next();
        }
      },
        err => {
          console.log("err", err);
          this.errorMessage = err.error.errorMessage;
          this.isError = true;
        }
      );
    }

  }

  performGeneralInfoDetailSubmit() {
    this.clearAllErrors();
    let requestData = this.generalInformationForm.value;
    requestData.e2eNumber = this.e2e;
    console.log("general form value for save", requestData);
    let moduleName = this.initiateDueDiligenceForm.get('dueDeligenceOfNewApp').value;
    console.log('performGeneralInfoDetailSubmit:moduleName:'+moduleName);
    if(moduleName==1 && (requestData.selectedAccountType==undefined || requestData.selectedAccountType==null 
      || requestData.selectedAccountType=='' || requestData.selectedBorrowerType==undefined || requestData.selectedBorrowerType==null
      || requestData.selectedBorrowerType=='' || requestData.selectedBorrowerCategory==undefined 
      || requestData.selectedBorrowerCategory==null || requestData.selectedBorrowerCategory=='')) 
    {
        this.isError = true;
        this.errorMessage = 'Account Type, Borrower Category, Borrower Type are required';
    } else {
      this.initiateDueDiligenceService.saveGeneralInfoDetails(requestData).subscribe((results: any) => {
        //console.log("results", results);
        if (!results.metaData.success) {
          this.isError = true;
          this.errorMessage = results.metaData.description;
        } else {
          this.toastrService.success('General info details saved successfully', 'Information', {
            timeOut: 3000,
          });
          //if(this.e2e !=null && this.e2e !='undefined' && this.e2e !='new') {
          //	this.loadCoApplicantDetails(this.e2e);
          //}
          this.generalInformationForm.reset();
          this.clientStepper.next();
        }
      },
        err => {
          console.log("err", err);
          this.errorMessage = err.error.errorMessage;
          this.isError = true;
        }
      );
    } 
  }
  performCoApplicantDetailSubmit() {
    this.clearAllErrors();
    let requestData = this.CGSDetailsForm.value;
    requestData.e2eNumber = this.e2e;
    console.log("requestData :: coApp for submit", requestData);
    console.log("CGSDetailsForm :: ", this.CGSDetailsForm);
    this.initiateDueDiligenceService.saveCoApplicantDetails(requestData).subscribe((results: any) => {
      //console.log("results", results);
      if (!results.metaData.success) {
        this.isError = true;
        this.errorMessage = results.metaData.description;
      } else {
        this.toastrService.success('Co-Applicant details saved successfully', 'Information', {
          timeOut: 3000,
        });
        //this.clientStepper.next();
      }
    },
      err => {
        console.log("err", err);
        this.errorMessage = err.error.errorMessage;
        this.isError = true;
      }
    );
  }

  selectionChange(event: StepperSelectionEvent) {
    let prevStepLabel = event.previouslySelectedStep.label;
    let currentStepLabel = event.selectedStep.label;
    if (currentStepLabel == "Auto-generated Details") {
      this.loadAutoGenerateDetails();
    }
    if (currentStepLabel == "Administrative Details") {
      if (this.e2e != null && this.e2e != 'undefined' && this.e2e != 'new') {
        this.isE2EPresent = true;
        this.loadAdministrativeDetails(this.e2e);
      }
    }
    if (currentStepLabel == "General Information") {
      this.loadGeneralInfoDetails(this.e2e);
      this.isGeneralInfoLoad = true;
    }
    if (currentStepLabel == "Particulars of Co-Applicant/Guarantor/Security") {
      this.loadCoApplicantDetails(this.e2e);
      this.isCoAppInfoLoad = true;
    }
  }

  collateralYes() {
    console.log('collateralYes:');
    this.isCollateral=true;
    // this.CGSDetailsForm.get('securityType').disable(true);
    this.CGSDetailsForm.get('securityType').setValue("1");
    this.isCollateralTypeSelected=true;
    //this.CGSDetailsForm.get('moveAbleProperties').reset();
  }
  collateralNo() {
    console.log('collateralNo:');
    this.isCollateral=false;
    this.isCollateralTypeSelected=false;
    this.CGSDetailsForm.get('securityType').setValue(null);
    this.CGSDetailsForm.get('moveAbleProperties').setValue(null);
    console.log('csg form vale:'+this.CGSDetailsForm.get('securityType').value);
    // this.CGSDetailsForm.get('securityType').disable(true);
  }

  collateralSecurityTypeSelected (event:any) {
    console.log('collateralSecurityTypeSelected:event:'+event.value);
    if(event.value==1) {
      this.isCollateralTypeSelected=true;
    } else {
      this.isCollateralTypeSelected=false;
      this.CGSDetailsForm.get('moveAbleProperties').reset();
    }
    
  }

  onLoanSchemeChange(event:any) {
    console.log('onLoanSchemeChange:with event:'+event.value);
    let selectedSchemeId = event.value;
    this.loanVariantOptionFiltered = this.loanVariantOptions.filter(loanVariant=>loanVariant.loanSchemeId==selectedSchemeId);
    //console.log('loanVariantOptionFiltered:'+JSON.stringify(this.loanVariantOptionFiltered));
    this.isLoanSchemeEnabled=true;
    this.isE2EPresent = false;
  }

  cifOnChange(event:any) {
    let cifValue=event.value;
    console.log('cifOnChange:value:'+cifValue);
    if(cifValue=='Y') {
      this.isCifYes = false;
      this.isApplicantNameEnabled=true;
      this.initiateDueDiligenceForm.get('boorrowerName').setValue(null);
    }
    if(cifValue=='N') {
      this.isCifYes = true;
      this.initiateDueDiligenceForm.get('cifNum').setValue(null);
      this.isApplicantNameEnabled=false;
      this.isCifNumChanged=false;
      this.initiateDueDiligenceForm.get('boorrowerName').setValue(null);
    }
  }

  cifNumChange(event:any) {
    let cifNumber = event.value;
    console.log('cifNumChange:cifNumber:'+cifNumber);
    console.log('cifOptions:'+JSON.stringify(this.cifOptions));
    let applicantValue = this.cifOptions.filter(cif=>cif.cifNum==cifNumber).map(cif=>cif.customerName);
    console.log('applicantValue:'+applicantValue);
    this.initiateDueDiligenceForm.get('boorrowerName').setValue(applicantValue);
    this.isCifNumChanged=true;
  }
  creditSectorChange(event:any) {
    let creditSectorValue= event.value;
    console.log('creditSectorChange:creditSectorValue:'+creditSectorValue);
    if(creditSectorValue==1){
      console.log('retail selected');
      this.isCreditSectorCommerical=false
    }
    if(creditSectorValue==2){
      console.log('commerical selected');
      this.isCreditSectorCommerical=true;
    }
    
    this.initiateDueDiligenceService.getListOfLoanSchemes('NonAudit', -1, creditSectorValue, this.clientId).subscribe(results => {
      console.log("results :: loaded loan schemes", results);
      if (results && results.data) {
        this.loanSchemeOptions = results.data;
      }

    });
    
  }
}
