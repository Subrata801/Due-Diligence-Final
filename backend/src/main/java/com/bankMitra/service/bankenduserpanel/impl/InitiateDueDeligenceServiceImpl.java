/**
 * 
 */
package com.bankMitra.service.bankenduserpanel.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.apache.commons.collections.CollectionUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bankMitra.exception.APIException;
import com.bankMitra.exception.DataAccessException;
import com.bankMitra.exception.ResourceNotFoundException;
import com.bankMitra.model.admin.LoanSchemeRequest;
import com.bankMitra.model.admin.response.ClientModuleHeaderResponse;
import com.bankMitra.model.admin.response.LoanSchemeResponse;
import com.bankMitra.model.admin.response.LoanVariantResponse;
import com.bankMitra.model.bankenduserpanel.request.AdministrativeRequest;
import com.bankMitra.model.bankenduserpanel.request.ComercialCreditFacilityRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceAuditProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceCoApplicantRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceGeneralInfoRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.NewDueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.ViewDueDeligenceRequest;
import com.bankMitra.model.bankenduserpanel.response.AccountType;
import com.bankMitra.model.bankenduserpanel.response.AdministrativeResponse;
import com.bankMitra.model.bankenduserpanel.response.AutoGeneratedResponse;
import com.bankMitra.model.bankenduserpanel.response.BorrowerCategory;
import com.bankMitra.model.bankenduserpanel.response.BranchCheckerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchMakerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchNameResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Checkers;
import com.bankMitra.model.bankenduserpanel.response.CifRegistrationResponse;
import com.bankMitra.model.bankenduserpanel.response.CoApplicant;
import com.bankMitra.model.bankenduserpanel.response.ComercialCreditFacilityDetails;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceAuditProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantGurantorResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceGeneralInfoResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.LoanSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Makers;
import com.bankMitra.model.bankenduserpanel.response.NewDueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportData;
import com.bankMitra.model.bankenduserpanel.response.ReportHeaderResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingActionResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingTableData;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDM2M5Request;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDRequest;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDResponse;
import com.bankMitra.model.bankenduserpanel.response.UnitChecker;
import com.bankMitra.model.bankenduserpanel.response.ViewDueDeligenceResponse;
import com.bankMitra.model.clientManagement.response.MovableProperty;
import com.bankMitra.model.reference.BorrowerType;
import com.bankMitra.model.reference.LoanVariant;
import com.bankMitra.model.reference.MessageCode;
import com.bankMitra.model.reference.RiskType;
import com.bankMitra.repository.bankenduserpanel.InitiateDueDeligenceRepository;
import com.bankMitra.repository.bankenduserpanel.impl.InitiateDueDeligenceRepositoryImpl;
import com.bankMitra.service.bankenduserpanel.InitiateDueDeligenceService;
import com.bankMitra.service.reference.ReferenceService;
import com.bankMitra.util.APIConstant;
import com.google.common.base.Functions;

import io.micrometer.core.instrument.util.StringUtils;

/**
 * @author Bank Maitra
 *
 */
@Service
public class InitiateDueDeligenceServiceImpl implements InitiateDueDeligenceService {
	
	private static final Logger logger = LoggerFactory.getLogger(InitiateDueDeligenceServiceImpl.class);
	
	@Autowired
	InitiateDueDeligenceRepository initiateDueDeligenceRepo;
	
	@Autowired
	ReferenceService refService;
	
	private MessageCode getMessageDescription(String dbResponseCode) throws ResourceNotFoundException {
		MessageCode msgOutPut = null;
		List<MessageCode> msgCodes = refService.getListOfMessageCode();
		for(MessageCode msg : msgCodes) {
			if(msg.getMessageCode().equalsIgnoreCase(dbResponseCode)) {
				msgOutPut =  msg;
				break;
			}
		}
		return msgOutPut;
	}
	
	/* (non-Javadoc)
	 * @see com.bankMitra.service.bankenduserpanel.InitiateDueDeligenceService#processDueDeligence(com.bankMitra.model.bankenduserpanel.request.DueDeligenceProcessRequest)
	 */
	@Override
	@Transactional
	public DueDeligenceProcessResponse processDueDeligence(@Valid DueDeligenceProcessRequest dueDeligenceProcessRequest)
			throws APIException {
		DueDeligenceProcessResponse dueDeligenceProcessResponse = null;
		try {
			dueDeligenceProcessResponse  =  initiateDueDeligenceRepo.processDueDeligence(dueDeligenceProcessRequest);
			final String dbResponseCode = dueDeligenceProcessResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				dueDeligenceProcessResponse.setMessageCode(filteredMsgData.getMessageCode());
				dueDeligenceProcessResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		}
		return dueDeligenceProcessResponse;
	}

	@Override
	@Transactional
	public DueDeligenceAuditProcessResponse processAuditDueDeligence(
			DueDeligenceAuditProcessRequest dueDeligenceProcessRequest) throws APIException {
		DueDeligenceAuditProcessResponse dueDeligenceProcessResponse = null;
		try {
			dueDeligenceProcessResponse  =  initiateDueDeligenceRepo.processAuditDueDeligence(dueDeligenceProcessRequest);
			final String dbResponseCode = dueDeligenceProcessResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				dueDeligenceProcessResponse.setMessageCode(filteredMsgData.getMessageCode());
				dueDeligenceProcessResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		}
		return dueDeligenceProcessResponse;
	}

	@Override
	@Transactional
	public NewDueDeligenceProcessResponse initiateNewDueDeligence(
			NewDueDeligenceProcessRequest dueDeligenceProcessRequest) throws APIException {
		NewDueDeligenceProcessResponse dueDeligenceProcessResponse = null;
		try {
			dueDeligenceProcessResponse  =  initiateDueDeligenceRepo.initiateNewDueDeligence(dueDeligenceProcessRequest);
			final String dbResponseCode = dueDeligenceProcessResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				dueDeligenceProcessResponse.setMessageCode(filteredMsgData.getMessageCode());
				dueDeligenceProcessResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		}
		return dueDeligenceProcessResponse;
	}

	@Override
	@Transactional(readOnly=true)
	public List<DueDeligenceProcessResponse> getNewDueDiligencePageDetails(
			DueDeligenceProcessRequest dueDeligenceRequest) throws APIException {
		List<DueDeligenceProcessResponse> listOfDueDeligence = null;
		try {
			listOfDueDeligence = initiateDueDeligenceRepo.getNewDueDiligencePageDetails(dueDeligenceRequest);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DUE_DELIGENCE_FAILURE);
		}
		return listOfDueDeligence;
	}

	@Override
	@Transactional(readOnly=true)
	public List<BranchNameResponse> getListOfBranchNames(Integer clientId) throws APIException {
		List<BranchNameResponse> branchUserList = null;
		try {
			branchUserList = initiateDueDeligenceRepo.getListOfBranchNames(clientId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BRANCHNAME_FAILURE);
		} 
		if(!Optional.ofNullable(branchUserList).isPresent() || branchUserList.isEmpty() )
			branchUserList = new ArrayList<BranchNameResponse>();
		
		return branchUserList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<Checkers> getListOfAuditFirmChecker(Integer clientId) throws APIException {
		List<Checkers> checkerList = null;
		try {
			checkerList = initiateDueDeligenceRepo.getListOfAuditFirmChecker(clientId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_AUDITFIRMCHECKER_FAILURE);
		} 
		if(!Optional.ofNullable(checkerList).isPresent() || checkerList.isEmpty() )
			checkerList = new ArrayList<Checkers>();
		
		return checkerList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<Makers> getListOfAuditFirmMaker(Integer clientId) throws APIException {
		List<Makers> makerList = null;
		try {
			makerList = initiateDueDeligenceRepo.getListOfAuditFirmMaker(clientId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_AUDITFIRMMAKER_FAILURE);
		} 
		if(!Optional.ofNullable(makerList).isPresent() || makerList.isEmpty() )
			makerList = new ArrayList<Makers>();
		
		return makerList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<LoanSchemeResponse> getListOfLoanSchemes(@Valid LoanSchemeRequest loanSchemeRequest)
			throws APIException {
		List<LoanSchemeResponse> loanSchemeList = null;
		try {
			loanSchemeList = initiateDueDeligenceRepo.getListOfLoanSchemes(loanSchemeRequest);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_LOANCHEME_FAILURE);
		} 
		if(!Optional.ofNullable(loanSchemeList).isPresent() || loanSchemeList.isEmpty() )
			loanSchemeList = new ArrayList<LoanSchemeResponse>();
		
		return loanSchemeList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<LoanVariantResponse> getListOfloanVariants(@Valid LoanVariant loanVariantRequest) throws APIException {
		List<LoanVariantResponse> loanVariantList = null;
		try {
			loanVariantList = initiateDueDeligenceRepo.getListOfloanVariants(loanVariantRequest);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_LOANVARIANT_FAILURE);
		} 
		if(!Optional.ofNullable(loanVariantList).isPresent() || loanVariantList.isEmpty() )
			loanVariantList = new ArrayList<LoanVariantResponse>();
		
		return loanVariantList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<AccountType> getListOfAccountTypes() throws APIException {
		List<AccountType> accTypeList = null;
		try {
			accTypeList = initiateDueDeligenceRepo.getListOfAccountTypes();
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_ACCOUNTTYPE_FAILURE);
		} 
		if(!Optional.ofNullable(accTypeList).isPresent() || accTypeList.isEmpty() )
			accTypeList = new ArrayList<AccountType>();
		
		return accTypeList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<BorrowerType> getListOfBorrowerTypes() throws APIException {
		List<BorrowerType> borrowerTypeList = null;
		try {
			borrowerTypeList = initiateDueDeligenceRepo.getListOfBorrowerTypes();
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BORROWERTYPE_FAILURE);
		} 
		if(!Optional.ofNullable(borrowerTypeList).isPresent() || borrowerTypeList.isEmpty() )
			borrowerTypeList = new ArrayList<BorrowerType>();
		
		return borrowerTypeList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<LoanVariantResponse> getListOfLoanSchemeForFacilities(
			@Valid LoanSchemeRequest loanSchemeFacilitiesRequest) throws APIException {
		List<LoanVariantResponse> loanSchemeList = null;
		try {
			loanSchemeList = initiateDueDeligenceRepo.getListOfLoanSchemeForFacilities(loanSchemeFacilitiesRequest);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_LOANCHEME_FAILURE);
		} 
		if(!Optional.ofNullable(loanSchemeList).isPresent() || loanSchemeList.isEmpty() )
			loanSchemeList = new ArrayList<LoanVariantResponse>();
		
		return loanSchemeList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<CoApplicant> getListOfCoapplicantDesignation() throws APIException {
		List<CoApplicant> coAppList = null;
		try {
			coAppList = initiateDueDeligenceRepo.getListOfCoapplicantDesignation();
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_COAPPLICANT_FAILURE);
		} 
		if(!Optional.ofNullable(coAppList).isPresent() || coAppList.isEmpty() )
			coAppList = new ArrayList<CoApplicant>();
		
		return coAppList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<ComercialCreditFacilityDetails> getCommercialCreditFacilities(
			ComercialCreditFacilityRequest comercialCreditFacilityRequest) throws APIException {
		List<ComercialCreditFacilityDetails> comercialCreditFacilities = null;
		try {
			comercialCreditFacilities = initiateDueDeligenceRepo.getCommercialCreditFacilities(comercialCreditFacilityRequest);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_COMMERCIAL_CREDIT_FACILITIES_FAILURE);
		} 
		if(!Optional.ofNullable(comercialCreditFacilities).isPresent() || comercialCreditFacilities.isEmpty() )
			comercialCreditFacilities = new ArrayList<ComercialCreditFacilityDetails>();
		
		return comercialCreditFacilities;
	}

	@Override
	@Transactional(readOnly=true)
	public List<CifRegistrationResponse> getListOfCIF(String clientId) throws APIException {
		List<CifRegistrationResponse> cifList = null;
		try {
			cifList = initiateDueDeligenceRepo.getListOfCIF(clientId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_CIF_FAILURE);
		} 
		if(!Optional.ofNullable(cifList).isPresent() || cifList.isEmpty() )
			cifList = new ArrayList<CifRegistrationResponse>();
		
		return cifList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<BranchMakerResponse> getBranchMaker(Integer clientGroupId) throws APIException {
		List<BranchMakerResponse> branchMakerList = null;
		try {
			branchMakerList = initiateDueDeligenceRepo.getBranchMaker(clientGroupId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BRANCH_MAKER_FAILURE);
		} 
		if(!Optional.ofNullable(branchMakerList).isPresent() || branchMakerList.isEmpty() )
			branchMakerList = new ArrayList<BranchMakerResponse>();
		
		return branchMakerList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<BranchCheckerResponse> getBranchChecker(Integer clientGroupId) throws APIException {
		List<BranchCheckerResponse> branchCheckerList = null;
		try {
			branchCheckerList = initiateDueDeligenceRepo.getBranchChecker(clientGroupId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BRANCH_CHECKER_FAILURE);
		} 
		if(!Optional.ofNullable(branchCheckerList).isPresent() || branchCheckerList.isEmpty() )
			branchCheckerList = new ArrayList<BranchCheckerResponse>();
		
		return branchCheckerList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<BranchSAResponse> getBranchSA(Integer clientGroupId) throws APIException {
		List<BranchSAResponse> branchSAList = null;
		try {
			branchSAList = initiateDueDeligenceRepo.getBranchSA(clientGroupId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BRANCH_CHECKER_FAILURE);
		} 
		if(!Optional.ofNullable(branchSAList).isPresent() || branchSAList.isEmpty() )
			branchSAList = new ArrayList<BranchSAResponse>();
		
		return branchSAList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<LoanSAResponse> getLoanSA(Integer clientGroupId) throws APIException {
		List<LoanSAResponse> loanSAList = null;
		try {
			loanSAList = initiateDueDeligenceRepo.getLoanSA(clientGroupId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BRANCH_CHECKER_FAILURE);
		} 
		if(!Optional.ofNullable(loanSAList).isPresent() || loanSAList.isEmpty() )
			loanSAList = new ArrayList<LoanSAResponse>();
		
		return loanSAList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<BorrowerCategory> getListOfBorrowerCategory() throws APIException {
		List<BorrowerCategory> borrowerCategoryList = null;
		try {
			borrowerCategoryList = initiateDueDeligenceRepo.getListOfBorrowerCategory();
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BORROWER_CATEGORY_FAILURE);
		} 
		if(!Optional.ofNullable(borrowerCategoryList).isPresent() || borrowerCategoryList.isEmpty() )
			borrowerCategoryList = new ArrayList<BorrowerCategory>();
		
		return borrowerCategoryList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<MovableProperty> getListOfMovableProperties() throws APIException {
		List<MovableProperty> movablePropertyList = null;
		try {
			movablePropertyList = initiateDueDeligenceRepo.getListOfMovableProperties();
			movablePropertyList.forEach(prop-> prop.setChecked(false));
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_BORROWER_CATEGORY_FAILURE);
		} 
		if(!Optional.ofNullable(movablePropertyList).isPresent() || movablePropertyList.isEmpty() )
			movablePropertyList = new ArrayList<MovableProperty>();
		
		return movablePropertyList;
	}

	@Override
	@Transactional(readOnly=true)
	public AutoGeneratedResponse getAutoGeneratedDetails(String loanAppId) throws APIException {
		AutoGeneratedResponse autoGeneratedResponse = null;
		try {
			autoGeneratedResponse  =  initiateDueDeligenceRepo.getAutoGeneratedDetails(loanAppId);
			final String dbResponseCode = autoGeneratedResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				autoGeneratedResponse.setMessageCode(filteredMsgData.getMessageCode());
				autoGeneratedResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_AUTO_GENERATED_DETAILS_FAILURE);
		}
		return autoGeneratedResponse;
	}

	@Override
	@Transactional
	public AdministrativeResponse saveAdministrativeDetails(AdministrativeRequest adminRequest) throws APIException {
		AdministrativeResponse administrativeResponse = null;
		try {
			administrativeResponse  =  initiateDueDeligenceRepo.saveAdministrativeDetails(adminRequest);
			final String dbResponseCode = administrativeResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				administrativeResponse.setMessageCode(filteredMsgData.getMessageCode());
				administrativeResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		}
		return administrativeResponse;
	}

	@Override
	@Transactional(readOnly=true)
	public List<UnitChecker> getListOfUnitChecker(String clientGroupId) throws APIException {
		List<UnitChecker> checkerList = null;
		try {
			checkerList = initiateDueDeligenceRepo.getListOfUnitChecker(clientGroupId);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_UNITCHECKER_FAILURE);
		} 
		if(!Optional.ofNullable(checkerList).isPresent() || checkerList.isEmpty() )
			checkerList = new ArrayList<UnitChecker>();
		
		return checkerList;
	}

	@Override
	@Transactional(readOnly=true)
	public UnitChecker getDefaultUnitChecker(String e2eNum) throws APIException {
		UnitChecker checker = null;
		try {
			checker = initiateDueDeligenceRepo.getDefaultUnitChecker(e2eNum);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DEFAULT_UNITCHECKER_FAILURE);
		} 
				
		return checker;
	}

	@Override
	@Transactional
	public DueDeligenceGeneralInfoResponse saveDueDiligenceGeneralInfo(DueDeligenceGeneralInfoRequest dueDeligenceRequest)
			throws APIException {
		DueDeligenceGeneralInfoResponse dueDeligenceGeneralInfoResponse = null;
		try {
			dueDeligenceGeneralInfoResponse  =  initiateDueDeligenceRepo.saveDueDiligenceGeneralInfo(dueDeligenceRequest);
			final String dbResponseCode = dueDeligenceGeneralInfoResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				dueDeligenceGeneralInfoResponse.setMessageCode(filteredMsgData.getMessageCode());
				dueDeligenceGeneralInfoResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_PROCESS_DUEDILIGENCE_GENERAL_INFO_FAILURE);
		}
		return dueDeligenceGeneralInfoResponse;
	}

	@Override
	@Transactional(readOnly=true)
	public DueDeligenceGeneralInfoResponse getDueDiligenceGeneralInfo(String e2eNum) throws APIException {
		DueDeligenceGeneralInfoResponse generalInfo = null;
		try {
			generalInfo = initiateDueDeligenceRepo.getDueDiligenceGeneralInfo(e2eNum);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DUEDILIGENCE_GENERAL_INFO_FAILURE);
		} 
				
		return generalInfo;
	}

	@Override
	@Transactional
	public DueDeligenceCoApplicantResponse saveDueDiligenceCoApplicant(DueDeligenceCoApplicantRequest dueDeligenceRequest)
			throws APIException {
		DueDeligenceCoApplicantResponse dueDeligenceCoApplicantResponse = null;
		try {
			dueDeligenceCoApplicantResponse  =  initiateDueDeligenceRepo.saveDueDiligenceCoApplicant(dueDeligenceRequest);
			final String dbResponseCode = dueDeligenceCoApplicantResponse.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				dueDeligenceCoApplicantResponse.setMessageCode(filteredMsgData.getMessageCode());
				dueDeligenceCoApplicantResponse.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_PROCESS_DUEDILIGENCE_CO_APPLICANT_FAILURE);
		}
		return dueDeligenceCoApplicantResponse;
	}
	
	@Override
	@Transactional(readOnly=true)
	public DueDeligenceCoApplicantRequest getDueDiligenceCoApplicantDetails(String e2eNum) throws APIException {
		DueDeligenceCoApplicantRequest coAppDetails = null;
		try {
			coAppDetails = initiateDueDeligenceRepo.getDueDiligenceCoApplicantDetails(e2eNum);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DUE_DILIGENCE_CO_APPLICANT_FAILURE);
		} 
				
		return coAppDetails;
	}

	@Override
	@Transactional(readOnly=true)
	public List<DueDeligenceCoApplicantGurantorResponse> getDueDiligenceGurantor(String e2eNum) throws APIException {
		List<DueDeligenceCoApplicantGurantorResponse> gurantorList = null;
		try {
			gurantorList = initiateDueDeligenceRepo.getDueDiligenceGurantor(e2eNum);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DUE_DILIGENCE_GURANTOR_FAILURE);
		} 
		if(!Optional.ofNullable(gurantorList).isPresent() || gurantorList.isEmpty() )
			gurantorList = new ArrayList<DueDeligenceCoApplicantGurantorResponse>();
		
		return gurantorList;
	}

	@Override
	@Transactional(readOnly=true)
	public DueDeligenceCoApplicantResponse getDueDiligenceCollateralSecurity(String e2eNum) throws APIException {
		DueDeligenceCoApplicantResponse generalInfo = null;
		try {
			generalInfo = initiateDueDeligenceRepo.getDueDiligenceCollateralSecurity(e2eNum);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DUE_DILIGENCE_COLLATERAL_SECURITY_FAILURE);
		} 
				
		return generalInfo;
	}

	@Override
	@Transactional(readOnly=true)
	public List<MovableProperty> getDueDiligenceMoveableProperty(String e2eNum) throws APIException {
		List<MovableProperty> moveableProperties = new ArrayList<>();
		List<MovableProperty> allMoveableProperties = getListOfMovableProperties();
		
		Map<Integer, MovableProperty> allMp = new HashMap<>();
		allMoveableProperties.forEach(t-> {
			allMp.put(t.getPropertyId(), t);
		});
		
		Map<Integer, MovableProperty> e2eMp = new HashMap<>();
		List<MovableProperty> finalList = new ArrayList<>();
		try {
			moveableProperties = initiateDueDeligenceRepo.getDueDiligenceMoveableProperty(e2eNum);
			if(CollectionUtils.isEmpty(moveableProperties)) {
				return allMoveableProperties;
			}
			
			moveableProperties.forEach(t-> {
				e2eMp.put(t.getPropertyId(), t);
			});
			//finalList.addAll(moveableProperties);
			
//			@SuppressWarnings("unchecked")
//			Collection<Integer> subtractedPropertyId = CollectionUtils.subtract(allMoveableProperties.stream().map(t->t.getPropertyId()).collect(Collectors.toList()), 
//					moveableProperties.stream().map(t->t.getPropertyId()).collect(Collectors.toList()));
//			
//			for(Integer propId : subtractedPropertyId) {
//				if(allMp.containsKey(propId)) {
//					finalList.add(allMp.get(propId));
//				}
//			}
			
			for(MovableProperty prop : allMoveableProperties) {
				if(allMp.containsKey(prop.getPropertyId()) && !e2eMp.containsKey(prop.getPropertyId())) {
					finalList.add(allMp.get(prop.getPropertyId()));
				} else if (allMp.containsKey(prop.getPropertyId()) && e2eMp.containsKey(prop.getPropertyId())) {
					finalList.add(e2eMp.get(prop.getPropertyId()));
				}
			}
			
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_GET_DUE_DILIGENCE_MOVEABLEPROPERTY_FAILURE);
		} 
				
		return finalList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<ViewDueDeligenceResponse> viewDueDiligence(ViewDueDeligenceRequest dueDeligenceRequest)
			throws APIException {
		List<ViewDueDeligenceResponse> viewDueDiligenceList = null;
		Map<String,String> headerMap = new LinkedHashMap<String,String>();
		ViewDueDeligenceResponse headerResp = new ViewDueDeligenceResponse();
		List<ViewDueDeligenceResponse> dueDiligenceHeaderMapList = new ArrayList<ViewDueDeligenceResponse>();
		try {
			viewDueDiligenceList = initiateDueDeligenceRepo.viewDueDiligence(dueDeligenceRequest);
			for(ViewDueDeligenceResponse resp :viewDueDiligenceList) {
				String header1Desc = resp.getHeader1desc()!=null?resp.getHeader1desc()+" ":"";
				String header2Desc = resp.getHeader2desc()!=null?resp.getHeader2desc()+" ":"";
				String header3Desc = resp.getHeader3desc()!=null?resp.getHeader3desc()+" ":"";
				String header4Desc = resp.getHeader4desc()!=null?resp.getHeader4desc():"";
				headerMap.put(resp.getDdSequence()+"_"+dueDeligenceRequest.getLoanAppId()+"_"+resp.getHeader1()+"_"+resp.getHeader2()+"_"+resp.getHeader3()+"_"+resp.getHeader4(),
						header1Desc+header2Desc+header3Desc+header4Desc);
				headerResp.setHeaderMap(headerMap);
				headerResp.setDdSequence(resp.getDdSequence());
				headerResp.setLoanApplicationId(dueDeligenceRequest.getLoanAppId());
				dueDiligenceHeaderMapList.add(headerResp);
			}
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_NO_HEADER_FOR_DUE_DILIGENCE_LOAN_APP_ID);
		} 
		if(!Optional.ofNullable(dueDiligenceHeaderMapList).isPresent() || dueDiligenceHeaderMapList.isEmpty() )
			dueDiligenceHeaderMapList = new ArrayList<ViewDueDeligenceResponse>();
		
		return dueDiligenceHeaderMapList;
	}

	@Override
	@Transactional(readOnly=true)
	public List<ViewDueDeligenceResponse> viewDetailsForDueDiligence(ViewDueDeligenceRequest dueDeligenceRequest)
			throws APIException {
		List<ViewDueDeligenceResponse> viewDueDiligenceList = null;
		try {
			viewDueDiligenceList = initiateDueDeligenceRepo.viewDetailsForDueDiligence(dueDeligenceRequest);
		} catch (DataAccessException e) {
			throw new APIException(e.getMessage());
		} catch (Exception e) {
			throw new APIException(APIConstant.MSG_NO_DETAILS_FOR_DUE_DILIGENCE);
		} 
		if(!Optional.ofNullable(viewDueDiligenceList).isPresent() || viewDueDiligenceList.isEmpty() )
			viewDueDiligenceList = new ArrayList<ViewDueDeligenceResponse>();
		
		return viewDueDiligenceList;
	}

	@Override
	public ReportHeaderResponse getReportingHeader(String e2eNum) throws APIException {
		List<ReportHeaderResponse> reportHeaderResponseList = new ArrayList<>();
		try {
//			boolean updateStatus = initiateDueDeligenceRepo.isComplianceReportUpdated(e2eNum);
//			logger.info("InitiateDueDeligenceServiceImpl :: getReportingHeader :: updateStatus :: {} for e2eNum {}", updateStatus, e2eNum);
			reportHeaderResponseList = initiateDueDeligenceRepo.getReportingHeader(e2eNum);
			if(CollectionUtils.isNotEmpty(reportHeaderResponseList)) {
				return reportHeaderResponseList.get(0);
			} else {
				logger.error("InitiateDueDeligenceServiceImpl :: getReportingHeader :: no data found for e2eNum {}", e2eNum);
				return new ReportHeaderResponse();
			}
		} catch (Exception e) {
			throw new APIException("Error Occurred while fetching reporting header details for e2eNum {}", e2eNum);
		}
	}
	
	public List<ReportingActionResponse> getReportingAction(String userName) throws APIException {
		List<ReportingActionResponse> reportingActionResponses = new ArrayList<>();
		try {
			reportingActionResponses = initiateDueDeligenceRepo.getReportingAction(userName);
		} catch (Exception e) {
			throw new APIException("Error Occurred while fetching reporting actions for userName {}", userName);
		}
		return reportingActionResponses;
	}
	
	public List<ReportingTableData> getReportTableDataService (String e2eNum) throws APIException {
		List<ReportingTableData> reportingTableDatas = new ArrayList<>();
		try {
			boolean status = initiateDueDeligenceRepo.isComplianceReportUpdated(e2eNum);
			logger.info("InitiateDueDeligenceServiceImpl::getReportTableDataService::compliance update status::{}",status);
			if(status) {
				reportingTableDatas = initiateDueDeligenceRepo.getReportTableData(e2eNum);
			} else {
				throw new APIException("Error Occurred while updating reporting status for e2eNum {}", e2eNum);
			}
			
		} catch (Exception e) {
			throw new APIException("Error Occurred while fetching reporting table data for e2eNum {}", e2eNum);
		}
		return reportingTableDatas;
	}
	
	public Integer getRiskTypeId (Integer clientId) throws APIException {
		try {
			List<RiskType> riskTypes = initiateDueDeligenceRepo.getRiskTypeId(clientId);
			if(CollectionUtils.isEmpty(riskTypes) && Objects.nonNull(riskTypes.get(0))) {
				logger.error("getRiskTypeId :: Error occurred :: No Risk Type found for client Id: "+clientId);
				throw new APIException("Error occurred : No Risk Type found for client Id: "+clientId);
			}
			return riskTypes.get(0).getRiskTypeId();
		} catch (DataAccessException e) {
			logger.error("getRiskTypeId :: Exception occurred :: for clientId:" +clientId + " :: exception ::"+e);
			throw new APIException("Error occurred while fetching risk type id");
		}
	}
	
	public String updateReportStatus (String userName, String e2eNum, Integer actionId) throws APIException {
		try {
			return initiateDueDeligenceRepo.getReportUpdateStatus(userName, e2eNum, actionId);
		} catch (Exception e) {
			logger.info("updateReportStatus :: Exception occurred :: for e2eNum:" +e2eNum + " :: exception ::"+e);
			throw new APIException(APIConstant.ERROR_CODE_ADMINMESAGE);
		}
	}
	
	public String generateReportService (String e2eNum, String rowName, String columnName) throws APIException {
		String status ="Success";
		String fileName="";
		String generateReportDynamicQuery = null;
		try {
			generateReportDynamicQuery = initiateDueDeligenceRepo.getDynamicQueryForGenerateReport (e2eNum, rowName, columnName);
			if(StringUtils.isNotBlank(generateReportDynamicQuery)) {
				logger.info("generateReportService :: generateReportDynamicQuery: {}", generateReportDynamicQuery);
				List<ReportData> repList = initiateDueDeligenceRepo.getReportData(generateReportDynamicQuery);
				logger.info("report data to be downloaded are :"+repList);
				fileName = generateExcelData(e2eNum, rowName, columnName, repList);
			} else {
				logger.info("generateReportService :: dynamic query is empty :: generateReportDynamicQuery: {} :: for e2eNum: {}", 
						generateReportDynamicQuery, e2eNum);
				throw new APIException(APIConstant.ERROR_CODE_ADMINMESAGE);
			}
			return fileName;
		} catch (Exception e) {
			logger.info("generateReportService :: Exception occurred :: for e2eNum:" +e2eNum + " :: exception ::"+e);
			throw new APIException(APIConstant.ERROR_CODE_ADMINMESAGE);
		}
	}
	
	public String generateExcelData(String e2eNum, String rowName, String columnName, List<ReportData> reports) throws IOException {
		logger.info("Starts generating report in excel");
		XSSFWorkbook workbook = new XSSFWorkbook();
		XSSFSheet spreadsheet = workbook.createSheet("compliance_report");
		XSSFRow row;
		String fileName = e2eNum+"_"+rowName+"_"+columnName+".xlsx";
		// file header creation
		row = spreadsheet.createRow(0);
		Cell cell1 = row.createCell(0);
		cell1.setCellValue("header1_desc");
		Cell cell2 = row.createCell(1);
		cell2.setCellValue("header2_desc");
		Cell cell3 = row.createCell(2);
		cell3.setCellValue("header3_desc");
		Cell cell4 = row.createCell(3);
		cell4.setCellValue("header4_desc");
		Cell cell5 = row.createCell(4);
		cell5.setCellValue("dd_data");
		Cell cell6 = row.createCell(5);
		cell6.setCellValue("response");

		// file data creation
		int rowid = 1;
		for (ReportData report : reports) {
			row = spreadsheet.createRow(rowid++);

			Cell cell7 = row.createCell(0);
			cell7.setCellValue(report.getHeader1Desc());
			Cell cell8 = row.createCell(1);
			cell8.setCellValue(report.getHeader2Desc());
			Cell cell9 = row.createCell(2);
			cell9.setCellValue(report.getHeader3Desc());
			Cell cell10 = row.createCell(3);
			cell10.setCellValue(report.getHeader4Desc());
			Cell cell11 = row.createCell(4);
			cell11.setCellValue(report.getDdData());
			Cell cell12 = row.createCell(5);
			cell12.setCellValue(report.getResponse());
		}

		String generatedFilePath = fileName;
		logger.info("InitiateDueDeligenceServiceImpl :: generateExcelData :: generated filePath location: {}",generatedFilePath);
		FileOutputStream out = new FileOutputStream(new File(generatedFilePath));

		workbook.write(out);
		out.close();
		workbook.close();
		
		return fileName;
	}
	
	public SaveViewDDResponse saveViewDD (SaveViewDDRequest req) throws APIException {
		SaveViewDDResponse response = null;
		try {
			response = initiateDueDeligenceRepo.saveViewDDDB(req);
			final String dbResponseCode = response.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				response.setMessageCode(filteredMsgData.getMessageCode());
				response.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (Exception e) {
			logger.error("InitiateDueDeligenceServiceImpl::saveViewDD:error occurred with message::{}",e.getMessage()+e);
			throw new APIException("Error occurred while saving viewDD");
		}
		return response;
	}
	
	public SaveViewDDResponse saveViewDD_M2_M5 (SaveViewDDM2M5Request req) throws APIException {
		SaveViewDDResponse response = null;
		try {
			response = initiateDueDeligenceRepo.saveViewDD_M2_M5_DB(req);
			final String dbResponseCode = response.getMessageCode();
			MessageCode filteredMsgData = getMessageDescription(dbResponseCode);
			if(null!=filteredMsgData){
				response.setMessageCode(filteredMsgData.getMessageCode());
				response.setMessageDescription(filteredMsgData.getMessageDescription());
			}
		} catch (Exception e) {
			logger.error("InitiateDueDeligenceServiceImpl::saveViewDD_M2_M5:error occurred with message::{}",e.getMessage()+e);
			throw new APIException("Error occurred while saving viewDD");
		}
		return response;
	}

}
