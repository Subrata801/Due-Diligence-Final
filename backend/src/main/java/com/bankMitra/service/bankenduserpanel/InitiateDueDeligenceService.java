/**
 * 
 */
package com.bankMitra.service.bankenduserpanel;

import java.util.List;

import javax.validation.Valid;

import com.bankMitra.exception.APIException;
import com.bankMitra.model.admin.LoanSchemeRequest;
import com.bankMitra.model.admin.response.LoanSchemeResponse;
import com.bankMitra.model.admin.response.LoanVariantResponse;
import com.bankMitra.model.bankenduserpanel.request.AdministrativeRequest;
import com.bankMitra.model.bankenduserpanel.request.ComercialCreditFacilityRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceAuditProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceCoApplicantRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceGeneralInfoRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.NewDueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.ViewDueDeligenceRequest;
import com.bankMitra.model.bankenduserpanel.response.AccountType;
import com.bankMitra.model.bankenduserpanel.response.AdministrativeResponse;
import com.bankMitra.model.bankenduserpanel.response.AutoGeneratedResponse;
import com.bankMitra.model.bankenduserpanel.response.BorrowerCategory;
import com.bankMitra.model.bankenduserpanel.response.BranchCheckerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchMakerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchNameResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Checkers;
import com.bankMitra.model.bankenduserpanel.response.CifRegistrationResponse;
import com.bankMitra.model.bankenduserpanel.response.CoApplicant;
import com.bankMitra.model.bankenduserpanel.response.ComercialCreditFacilityDetails;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceAuditProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantGurantorResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceGeneralInfoResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.LoanSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Makers;
import com.bankMitra.model.bankenduserpanel.response.NewDueDeligencePageResponse;
import com.bankMitra.model.bankenduserpanel.response.NewDueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportHeaderResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingActionResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingTableData;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDM2M5Request;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDRequest;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDResponse;
import com.bankMitra.model.bankenduserpanel.response.UnitChecker;
import com.bankMitra.model.bankenduserpanel.response.ViewDueDeligenceResponse;
import com.bankMitra.model.clientManagement.response.MovableProperty;
import com.bankMitra.model.reference.BorrowerType;
import com.bankMitra.model.reference.LoanVariant;

/**
 * @author Bank Maitra
 *
 */
public interface InitiateDueDeligenceService {

	DueDeligenceProcessResponse processDueDeligence(@Valid DueDeligenceProcessRequest dueDeligenceProcessRequest) throws APIException;

	DueDeligenceAuditProcessResponse processAuditDueDeligence(
			@Valid DueDeligenceAuditProcessRequest dueDeligenceProcessRequest) throws APIException;

	NewDueDeligenceProcessResponse initiateNewDueDeligence(
			@Valid NewDueDeligenceProcessRequest dueDeligenceProcessRequest) throws APIException;

	List<DueDeligenceProcessResponse> getNewDueDiligencePageDetails(
			DueDeligenceProcessRequest dueDeligenceRequest) throws APIException;

	List<BranchNameResponse> getListOfBranchNames(Integer clientId)  throws APIException;

	List<Checkers> getListOfAuditFirmChecker(Integer clientId)  throws APIException;

	List<Makers> getListOfAuditFirmMaker(Integer clientId)  throws APIException;

	List<LoanSchemeResponse> getListOfLoanSchemes(@Valid LoanSchemeRequest loanSchemeRequest) throws APIException;

	List<LoanVariantResponse> getListOfloanVariants(@Valid LoanVariant loanVariantRequest) throws APIException;

	List<AccountType> getListOfAccountTypes()  throws APIException;

	List<BorrowerType> getListOfBorrowerTypes() throws APIException;

	List<LoanVariantResponse> getListOfLoanSchemeForFacilities(@Valid LoanSchemeRequest loanSchemeFacilitiesRequest) throws APIException;

	List<CoApplicant> getListOfCoapplicantDesignation() throws APIException;

	List<ComercialCreditFacilityDetails> getCommercialCreditFacilities(
			@Valid ComercialCreditFacilityRequest comercialCreditFacilityRequest) throws APIException;

	List<CifRegistrationResponse> getListOfCIF(String clientId)  throws APIException;

	List<BranchMakerResponse> getBranchMaker(Integer clientGroupId) throws APIException;

	List<BranchCheckerResponse> getBranchChecker(Integer clientGroupId) throws APIException;

	List<BranchSAResponse> getBranchSA(Integer clientGroupId) throws APIException;

	List<LoanSAResponse> getLoanSA(Integer clientGroupId) throws APIException;

	List<BorrowerCategory> getListOfBorrowerCategory()  throws APIException;

	List<MovableProperty> getListOfMovableProperties()  throws APIException;

	AutoGeneratedResponse getAutoGeneratedDetails(String loanAppId) throws APIException;

	AdministrativeResponse saveAdministrativeDetails(AdministrativeRequest adminRequest) throws APIException;

	List<UnitChecker> getListOfUnitChecker(String clientGroupId) throws APIException;

	UnitChecker getDefaultUnitChecker(String e2eNum) throws APIException;

	DueDeligenceGeneralInfoResponse saveDueDiligenceGeneralInfo(DueDeligenceGeneralInfoRequest dueDeligenceRequest) throws APIException;

	DueDeligenceGeneralInfoResponse getDueDiligenceGeneralInfo(String e2eNum) throws APIException;

	DueDeligenceCoApplicantResponse saveDueDiligenceCoApplicant(DueDeligenceCoApplicantRequest dueDeligenceRequest)  throws APIException;

	DueDeligenceCoApplicantRequest getDueDiligenceCoApplicantDetails(String e2eNum) throws APIException;
	
	List<DueDeligenceCoApplicantGurantorResponse> getDueDiligenceGurantor(String e2eNum) throws APIException;

	DueDeligenceCoApplicantResponse getDueDiligenceCollateralSecurity(String e2eNum) throws APIException;

	List<MovableProperty> getDueDiligenceMoveableProperty(String e2eNum) throws APIException;

	List<ViewDueDeligenceResponse> viewDueDiligence(ViewDueDeligenceRequest dueDeligenceRequest) throws APIException;

	List<ViewDueDeligenceResponse> viewDetailsForDueDiligence(ViewDueDeligenceRequest dueDeligenceRequest) throws APIException;

	ReportHeaderResponse getReportingHeader(String e2eNum) throws APIException;

	List<ReportingActionResponse> getReportingAction(String userName) throws APIException;
	
	List<ReportingTableData> getReportTableDataService (String e2eNum) throws APIException;

	String updateReportStatus (String userName, String e2eNum, Integer actionId) throws APIException;
	
	String generateReportService (String e2eNum, String rowName, String columnName) throws APIException;
	
	SaveViewDDResponse saveViewDD (SaveViewDDRequest req) throws APIException;
	
	SaveViewDDResponse saveViewDD_M2_M5 (SaveViewDDM2M5Request req) throws APIException;
	
	Integer getRiskTypeId(Integer clientId) throws APIException;
}