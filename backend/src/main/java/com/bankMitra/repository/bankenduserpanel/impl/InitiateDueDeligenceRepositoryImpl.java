
/**
 * 
 */
package com.bankMitra.repository.bankenduserpanel.impl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import com.bankMitra.exception.APIException;
import com.bankMitra.exception.DataAccessException;
import com.bankMitra.model.admin.LoanSchemeRequest;
import com.bankMitra.model.admin.response.LoanSchemeResponse;
import com.bankMitra.model.admin.response.LoanVariantResponse;
import com.bankMitra.model.bankenduserpanel.request.AdministrativeRequest;
import com.bankMitra.model.bankenduserpanel.request.ComercialCreditFacilityRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceAuditProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceCoApplicantRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceGeneralInfoRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.LoanFacility;
import com.bankMitra.model.bankenduserpanel.request.NewDueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.ViewDueDeligenceRequest;
import com.bankMitra.model.bankenduserpanel.response.AccountType;
import com.bankMitra.model.bankenduserpanel.response.AdministrativeResponse;
import com.bankMitra.model.bankenduserpanel.response.AutoGeneratedResponse;
import com.bankMitra.model.bankenduserpanel.response.BorrowerCategory;
import com.bankMitra.model.bankenduserpanel.response.BranchCheckerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchMakerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchNameResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Checkers;
import com.bankMitra.model.bankenduserpanel.response.CifRegistrationResponse;
import com.bankMitra.model.bankenduserpanel.response.CoApplicant;
import com.bankMitra.model.bankenduserpanel.response.CoApplicantDetails;
import com.bankMitra.model.bankenduserpanel.response.ComercialCreditFacilityDetails;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceAuditProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantGurantorResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceGeneralInfoResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.GuarantorDetails;
import com.bankMitra.model.bankenduserpanel.response.LoanSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Makers;
import com.bankMitra.model.bankenduserpanel.response.Module;
import com.bankMitra.model.bankenduserpanel.response.MoveableProperty;
import com.bankMitra.model.bankenduserpanel.response.NewDueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportData;
import com.bankMitra.model.bankenduserpanel.response.ReportHeaderResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingActionResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingTableData;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDM2M5Request;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDRequest;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDResponse;
import com.bankMitra.model.bankenduserpanel.response.UnitChecker;
import com.bankMitra.model.bankenduserpanel.response.ViewDueDeligenceResponse;
import com.bankMitra.model.clientManagement.response.MovableProperty;
import com.bankMitra.model.reference.BorrowerType;
import com.bankMitra.model.reference.LoanVariant;
import com.bankMitra.model.reference.RiskType;
import com.bankMitra.repository.admin.rowmapper.ClientDueDeligenceRowMapper;
import com.bankMitra.repository.bankenduserpanel.InitiateDueDeligenceRepository;
import com.bankMitra.repository.bankenduserpanel.rowmapper.AccountTypeRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.AuditFirmCheckerRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.AuditFirmMakerRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.AutoGeneratedRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.BorrowerCategoryRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.BorrowerTypeRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.BranchCheckerRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.BranchMakerRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.BranchNameRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.BranchSARowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.CIFRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.CoaApplicantRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.CollateralSecurityRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.CommercialCreditFacilityRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DefaultUnitCheckerRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDeligenceCoAppRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDeligenceNonM1RowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDeligenceRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDiligenceCoAppGurantorResponseRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDiligenceCoAppResponseRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDiligenceHeaderRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDiligenceResponseRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.DueDiligenceRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.LoanSARowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.LoanSchemeRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.LoanVariantRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.ModuleRowMaper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.MovablePropertyRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.ReportDataRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.ReportingActionRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.ReportingHeaderRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.ReportingTableDataRowMapper;
import com.bankMitra.repository.bankenduserpanel.rowmapper.UnitCheckerRowMapper;
import com.bankMitra.repository.reference.impl.RiskType2RowMapper;
import com.bankMitra.repository.reference.impl.RiskTypeRowMapper;
import com.bankMitra.util.APIConstant;

import io.jsonwebtoken.lang.Collections;

/**
 * @author Bank Maitra
 *
 */
@Repository
public class InitiateDueDeligenceRepositoryImpl implements InitiateDueDeligenceRepository {

	private static final Logger logger = LoggerFactory.getLogger(InitiateDueDeligenceRepositoryImpl.class);
	
	@Autowired
    private JdbcTemplate jdbcTemplate;
	
	/* (non-Javadoc)
	 * @see com.bankMitra.repository.bankenduserpanel.InitiateDueDeligenceRepository#processDueDeligence(com.bankMitra.model.bankenduserpanel.request.DueDeligenceProcessRequest)
	 */
	@Override
	public DueDeligenceProcessResponse processDueDeligence(@Valid DueDeligenceProcessRequest dueDeligenceProcessRequest)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public DueDeligenceAuditProcessResponse processAuditDueDeligence(
			DueDeligenceAuditProcessRequest dueDeligenceProcessRequest) throws DataAccessException {
		DueDeligenceAuditProcessResponse dueDeligenceProcessResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funcinitiateloanapplicationaudit(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, dueDeligenceProcessRequest.getUserName());
			cs.setString(2, dueDeligenceProcessRequest.getSelectModule());
			
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getCncNumber()))
				cs.setString(3, dueDeligenceProcessRequest.getCncNumber());
			else 
				cs.setString(3, "");
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getCncDate())) {
				SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
				java.sql.Date startDate
				= new java.sql.Date(dueDeligenceProcessRequest.getCncDate().getTime());
				cs.setDate(4, startDate);
			} else 
				cs.setDate(4, null);
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getBranchId()))
				cs.setString(5, dueDeligenceProcessRequest.getBranchId());
			else 
				cs.setString(5, "");
			cs.setString(6, dueDeligenceProcessRequest.getIfscCode());
			cs.setString(7, dueDeligenceProcessRequest.getAuditChecker());
			cs.setString(8, dueDeligenceProcessRequest.getAuditControlAuthority());
			cs.setString(9, dueDeligenceProcessRequest.getBorrowerName());
			cs.setString(10, dueDeligenceProcessRequest.getCifNumber());
			cs.setInt(11, dueDeligenceProcessRequest.getCreditSectorId());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getLoanSchemeId()))
				cs.setInt(12, dueDeligenceProcessRequest.getLoanSchemeId());
			else 
				cs.setInt(12, -1);
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getLoanVariantId()))
				cs.setInt(13, dueDeligenceProcessRequest.getLoanVariantId());
			else 
				cs.setInt(13, -1);
			cs.setString(14, dueDeligenceProcessRequest.getLoanAccountNum());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getSanctionDate())) {
				SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
				java.sql.Date startDate
				= new java.sql.Date(dueDeligenceProcessRequest.getSanctionDate().getTime());
				cs.setDate(15, startDate);
			} else 
				cs.setDate(15, null);
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getSanctionAmount()))
				cs.setInt(16, dueDeligenceProcessRequest.getSanctionAmount());
			else
				cs.setInt(16, -1);
			cs.setString(17, dueDeligenceProcessRequest.getSanctionAmountWords());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getLoanTenor()))
				cs.setInt(18, dueDeligenceProcessRequest.getLoanTenor());
			else 
				cs.setInt(18, -1);
			cs.setString(19, dueDeligenceProcessRequest.getAccountStatus());
			
			cs.setString(20, dueDeligenceProcessRequest.getReleaseOfSecurity());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getDateOfClosure())) {
				SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
				java.sql.Date startDate
				= new java.sql.Date(dueDeligenceProcessRequest.getDateOfClosure().getTime());
				cs.setDate(21, startDate);
			} else 
				cs.setDate(21, null);
			cs.setString(22, dueDeligenceProcessRequest.getTypeOfAuditAccount());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getTypeOfBorrower()))
				cs.setInt(23, dueDeligenceProcessRequest.getTypeOfBorrower());
			else
				cs.setInt(23, -1);
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getBorrowerCategory()))				
				cs.setInt(24, dueDeligenceProcessRequest.getBorrowerCategory());
			else
				cs.setInt(24, -1);
			int i=0;
			if(null!=dueDeligenceProcessRequest.getFacilityDetails()
					&& dueDeligenceProcessRequest.getFacilityDetails().size()>0) {
				String[] arrCreditFacilities =  new String[dueDeligenceProcessRequest.getFacilityDetails().size()];
				for(ComercialCreditFacilityDetails arr: dueDeligenceProcessRequest.getFacilityDetails()) {
					String inputData = "("+arr.getFacility()+","
			        		+"\""+arr.getAccountNum()+"\","
							+arr.getDateOfSanction()+","
							+arr.getSanctionedLimit()+","
							+arr.getSanctionedLimitWords()+","
							+arr.getLoanTenor()+")";
					arrCreditFacilities[i] = inputData;
					i++;
				}
				
				cs.setArray(25,connection.createArrayOf("bmadmin.obj_cc_facilities",arrCreditFacilities));
			} else {
				cs.setArray(25,connection.createArrayOf("bmadmin.obj_cc_facilities",new String[]{}));
			}
			/*int coappCnt = 24;
			if(null!=dueDeligenceProcessRequest.getListOfCoApplicantDetails()
					&& dueDeligenceProcessRequest.getListOfCoApplicantDetails().size()>0) {
				for(CoApplicantDetails coApp: dueDeligenceProcessRequest.getListOfCoApplicantDetails()) {
					cs.setString(coappCnt, coApp.getNameOfCoApplicant());
					cs.setString(coappCnt++, coApp.getDesignation());
				}
			}*/
			cs.setString(26, dueDeligenceProcessRequest.getNameOfCoApplicant1());
			cs.setString(27, dueDeligenceProcessRequest.getDesignation1());
			cs.setString(28, dueDeligenceProcessRequest.getNameOfCoApplicant2());
			cs.setString(29, dueDeligenceProcessRequest.getDesignation2());
			cs.setString(30, dueDeligenceProcessRequest.getNameOfCoApplicant3());
			cs.setString(31, dueDeligenceProcessRequest.getDesignation3());
			cs.setString(32, dueDeligenceProcessRequest.getNameOfCoApplicant4());
			cs.setString(33, dueDeligenceProcessRequest.getDesignation4());
			cs.setString(34, dueDeligenceProcessRequest.getNameOfCoApplicant5());
			cs.setString(35, dueDeligenceProcessRequest.getDesignation5());
			cs.setString(36, dueDeligenceProcessRequest.getTypeOfAuditAccount());
			cs.setString(37, dueDeligenceProcessRequest.getGuarantor());
			cs.setString(38, dueDeligenceProcessRequest.getNameOfGuarantor1());
			cs.setString(39, dueDeligenceProcessRequest.getNameOfGuarantor2());
			cs.setString(40, dueDeligenceProcessRequest.getNameOfGuarantor3());
			cs.setString(41, dueDeligenceProcessRequest.getNameOfGuarantor4());
			cs.setString(42, dueDeligenceProcessRequest.getCollateralSecurityTypeId());
			cs.setString(43, dueDeligenceProcessRequest.getTypeOfSecurity());
			Integer[] arrSecurity = null;
			if(!CollectionUtils.isEmpty(dueDeligenceProcessRequest.getMovablePropertyTypes())) {
				arrSecurity = new Integer[dueDeligenceProcessRequest.getMovablePropertyTypes().size()];
				i = 0;
			    for(String data :dueDeligenceProcessRequest.getMovablePropertyTypes()) {
			    	arrSecurity[i] = Integer.parseInt(data);
			    	i=i+1;
			    }
			    cs.setArray(44,connection.createArrayOf("SMALLINT",arrSecurity));//connection.createArrayOf("bmadmin.obj_cc_facilities",arrSecurity));
			} else {
				cs.setArray(44,connection.createArrayOf("SMALLINT",new Integer[]{}));
			}
			
			cs.setString(45, dueDeligenceProcessRequest.getComments());
			
			cs.registerOutParameter(46, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(46);
			logger.info("Function result code returned after execution of function funcinitiateloanapplicationaudit :",functionResult);
			dueDeligenceProcessResponse = new DueDeligenceAuditProcessResponse();
			dueDeligenceProcessResponse.setMessageCode(functionResult);
			return dueDeligenceProcessResponse;
		} catch (SQLException e) {
			logger.error("unable to execute the function funcinitiateloanapplicationaudit",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcinitiateloanapplicationaudit",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcinitiateloanapplicationaudit");
			}
		}

	}

	@Override
	public NewDueDeligenceProcessResponse initiateNewDueDeligence(
			NewDueDeligenceProcessRequest dueDeligenceProcessRequest) throws DataAccessException {
		NewDueDeligenceProcessResponse dueDeligenceProcessResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funcinitiateloanapplicatione2e(?,?,?,?,?,?,?,?,?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, dueDeligenceProcessRequest.getCreatedBy());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getDueDeligenceOfNewApp()))
				cs.setInt(2, Integer.parseInt(dueDeligenceProcessRequest.getDueDeligenceOfNewApp()));
			else 
				cs.setInt(2, -1);
			
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getLoanAppNum()))
				cs.setString(3, dueDeligenceProcessRequest.getLoanAppNum());
			else 
				cs.setString(3, "");
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getLoanAppDate()))
				cs.setString(4, dueDeligenceProcessRequest.getLoanAppDate());
			else 
				cs.setString(4, "");
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getAvailabilityOfCifNum()))
				cs.setString(5, dueDeligenceProcessRequest.getAvailabilityOfCifNum());
			else 
				cs.setString(5, "");
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getCifNum()))
				cs.setString(6, dueDeligenceProcessRequest.getCifNum());
			else 
				cs.setString(6, "");
			cs.setString(7, dueDeligenceProcessRequest.getBoorrowerName());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getSelectCreditSector()))
				cs.setInt(8, Integer.parseInt(dueDeligenceProcessRequest.getSelectCreditSector()));
			else
				cs.setInt(8, -1);
			//cs.setString(9, dueDeligenceProcessRequest.getExistingLoanAcctNum());
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getSelectLoanScheme()))
				cs.setInt(9, Integer.parseInt(dueDeligenceProcessRequest.getSelectLoanScheme()));
			else
				cs.setInt(9, -1);
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getSelectLoanScheme()))
				cs.setInt(10, Integer.parseInt(dueDeligenceProcessRequest.getSelectLoanVariant()));
			else
				cs.setInt(10, -1);
			/*cs.setString(11, dueDeligenceProcessRequest.getE2eExistingLoanAcount());
			
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getStartDate())) {
				SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
				java.sql.Date startDate
				= new java.sql.Date(dueDeligenceProcessRequest.getStartDate().getTime());
				cs.setDate(12, startDate);
			} else {
				cs.setDate(12, null);
        	}
			
			if(!StringUtils.isEmpty(dueDeligenceProcessRequest.getEndDate())) {
				SimpleDateFormat DateFor = new SimpleDateFormat("dd/MM/yyyy");
				java.sql.Date endDate
				= new java.sql.Date(dueDeligenceProcessRequest.getEndDate().getTime());
				cs.setDate(13, endDate);
			} else {
				cs.setDate(13, null);
        	}
			cs.setString(14, dueDeligenceProcessRequest.getAssignBranchMaker());
			cs.setString(15, dueDeligenceProcessRequest.getAssignBranchChecker());
			
			cs.setString(16, dueDeligenceProcessRequest.getCpcChecker());
			cs.setString(17, dueDeligenceProcessRequest.getCpcSA());
			
			cs.setString(18, dueDeligenceProcessRequest.getZoChecker());
			cs.setString(19, dueDeligenceProcessRequest.getZoSA());
			
			cs.setString(20, dueDeligenceProcessRequest.getHoChecker());
			cs.setString(21, dueDeligenceProcessRequest.getHoSA());
			*/
			cs.setString(11, dueDeligenceProcessRequest.getAssignBranchMaker());
			cs.setString(12, dueDeligenceProcessRequest.getComments());
			cs.registerOutParameter(13, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(13);
			logger.info("Function result code returned after execution of function funcinitiateloanapplicatione2e :",functionResult);
			dueDeligenceProcessResponse = new NewDueDeligenceProcessResponse();
			dueDeligenceProcessResponse.setMessageCode(functionResult);
			return dueDeligenceProcessResponse;
		} catch (SQLException e) {
			logger.error("unable to execute the function funcinitiateloanapplicatione2e",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcinitiateloanapplicatione2e",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcinitiateloanapplicatione2e");
			}
		}

	}

	@Override
	public List<DueDeligenceProcessResponse> getNewDueDiligencePageDetails(
			DueDeligenceProcessRequest dueDeligenceRequest) throws DataAccessException {
		try {
			if(Objects.nonNull(dueDeligenceRequest) && !StringUtils.isEmpty(dueDeligenceRequest.getE2eNumber())) {
				return jdbcTemplate.query(APIConstant.GET_DUE_DILIGENCE_FOR_E2E,
					  new Object[] {dueDeligenceRequest.getE2eNumber()},
					  new DueDiligenceRowMapper());
			} else {
				logger.error("InitiateDueDeligenceRepositoryImpl :: getNewDueDiligencePageDetails ::"
						+ " input object or e2e number is null :: dueDeligenceRequest {} ", dueDeligenceRequest);
				//throw new APIException("Invalid");
				return new ArrayList<DueDeligenceProcessResponse>();
			}
			  
		} catch (EmptyResultDataAccessException e) {
			logger.error("No due deligence returned from db for query :"+APIConstant.GET_DUE_DILIGENCE_FOR_E2E+e);
			return new ArrayList<DueDeligenceProcessResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting due deligence details for e2e num  :"+dueDeligenceRequest.getE2eNumber() + ex);
			throw new DataAccessException(APIConstant.MSG_GET_COAPPLICANT_FAILURE);
		}
	}

	@Override
	public List<CoApplicant> getListOfCoapplicantDesignation() throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_CO_APPLICANT_LIST,new CoaApplicantRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_CO_APPLICANT_LIST+e);
			return new ArrayList<CoApplicant>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of co applicant  :"+APIConstant.GET_CO_APPLICANT_LIST+ ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_COAPPLICANT_FAILURE);
		}
	}

	@Override
	public List<LoanVariantResponse> getListOfLoanSchemeForFacilities(LoanSchemeRequest loanSchemeFacilitiesRequest)
			throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_CO_LOANSCHEME_FACILITY_LIST,
					  new Object[]{Integer.parseInt(loanSchemeFacilitiesRequest.getClientId())},new LoanVariantRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_CO_LOANSCHEME_FACILITY_LIST+ " loan scheme Id :"+loanSchemeFacilitiesRequest.getLoanSchemeId()+e);
			return new ArrayList<LoanVariantResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of loan scheme facility  :"+APIConstant.GET_CO_LOANSCHEME_FACILITY_LIST+ " loan scheme ID :"+loanSchemeFacilitiesRequest.getLoanSchemeId()+ ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_LOANCHEME_FAILURE);
		}
	}

	@Override
	public List<BorrowerType> getListOfBorrowerTypes() throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_BORROWER_TYPE_LIST,new BorrowerTypeRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_BORROWER_TYPE_LIST,e);
			return new ArrayList<BorrowerType>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of borrower type :"+APIConstant.GET_BORROWER_TYPE_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_BORROWERTYPE_FAILURE);
		}
	}

	@Override
	public List<AccountType> getListOfAccountTypes() throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_ACCOUNT_TYPE_LIST,new AccountTypeRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_ACCOUNT_TYPE_LIST,e);
			return new ArrayList<AccountType>();
	    } catch (Exception ex) {

	    	logger.error("Exception while getting list of account type  :"+APIConstant.GET_ACCOUNT_TYPE_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_ACCOUNTTYPE_FAILURE);
		}
	}

	@Override
	public List<LoanVariantResponse> getListOfloanVariants(LoanVariant loanVariantRequest) throws DataAccessException {
		try {
			if(!StringUtils.isEmpty(loanVariantRequest.getTypeOfDueDeligence()) 
					&& "Audit".equalsIgnoreCase(loanVariantRequest.getTypeOfDueDeligence()))
			    return jdbcTemplate.query(APIConstant.GET_CO_LOANVARIANT_LIST,new Object[]{loanVariantRequest.getLoanSchemeId()},new LoanVariantRowMapper());
			else
				return jdbcTemplate.query(APIConstant.GET_LOANVARIANT_LIST_FOR_NEW_DUE_DILIGENCE,new Object[]{loanVariantRequest.getClientId()},new LoanVariantRowMapper());
		} catch (EmptyResultDataAccessException e) {
			if(!StringUtils.isEmpty(loanVariantRequest.getTypeOfDueDeligence()) 
					&& "Audit".equalsIgnoreCase(loanVariantRequest.getTypeOfDueDeligence()))
				logger.error("No user returned from db for query :"+APIConstant.GET_CO_LOANVARIANT_LIST+ " loan scheme id :"+loanVariantRequest.getLoanSchemeId(),e);
			else
				logger.error("No user returned from db for query :"+APIConstant.GET_CO_LOANVARIANT_LIST+ " client id :"+loanVariantRequest.getClientId(),e);
			return new ArrayList<LoanVariantResponse>();
	    } catch (Exception ex) {
	    	if(!StringUtils.isEmpty(loanVariantRequest.getTypeOfDueDeligence()) 
					&& "Audit".equalsIgnoreCase(loanVariantRequest.getTypeOfDueDeligence()))
	    		logger.error("Exception while getting list of loan variant  :"+APIConstant.GET_CO_LOANVARIANT_LIST+ " loan scheme id :"+loanVariantRequest.getLoanSchemeId(), ex.getMessage());
	    	else 
	    		logger.error("Exception while getting list of loan variant  :"+APIConstant.GET_CO_LOANVARIANT_LIST+ " client id :"+loanVariantRequest.getClientId(), ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_LOANVARIANT_FAILURE);
		}
	}

	@Override
	public List<LoanSchemeResponse> getListOfLoanSchemes(LoanSchemeRequest loanSchemeRequest)
			throws DataAccessException {
		try {
			if("Audit".equalsIgnoreCase(loanSchemeRequest.getTypeOfDueDeligence()))
			  return jdbcTemplate.query(APIConstant.GET_CO_LOANSCHEME_LIST,new Object[]{loanSchemeRequest.getBranchId(),
					  loanSchemeRequest.getCreditScoreTypeId()},new LoanSchemeRowMapper());
			else 
				return jdbcTemplate.query(APIConstant.GET_LOANSCHEME_LIST_FOR_NEW_DUE_DILIGENCE,new Object[]{
						  Integer.parseInt(loanSchemeRequest.getClientId()),loanSchemeRequest.getCreditScoreTypeId()},new LoanSchemeRowMapper());
			} catch (EmptyResultDataAccessException e) {
				logger.error("No user returned from db for query :"+APIConstant.GET_CO_LOANSCHEME_LIST+
						" branch id :"+loanSchemeRequest.getBranchId()+ " credit sector Type Id :"+
						  loanSchemeRequest.getCreditScoreTypeId(),e);
				return new ArrayList<LoanSchemeResponse>();
		    } catch (Exception ex) {
		    	if("Audit".equalsIgnoreCase(loanSchemeRequest.getTypeOfDueDeligence())) {
					logger.error("Exception while getting list of loan scheme  :"+APIConstant.GET_CO_LOANSCHEME_LIST+ " branch id :"+loanSchemeRequest.getBranchId()+ " credit sector Type Id :"+
							  loanSchemeRequest.getCreditScoreTypeId(), ex.getMessage());
		    	} else {
		    		logger.error("Exception while getting list of loan scheme  :"+APIConstant.GET_LOANSCHEME_LIST_FOR_NEW_DUE_DILIGENCE+ " client id :"+loanSchemeRequest.getClientId(), ex.getMessage());
		    	}
				throw new DataAccessException(APIConstant.MSG_GET_LOANCHEME_FAILURE);
			}
	}

	@Override
	public List<Makers> getListOfAuditFirmMaker(Integer clientId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_AUDIt_FIRM_MAKER_LIST,new Object[]{clientId},new AuditFirmMakerRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_AUDIt_FIRM_MAKER_LIST+ " client id :"+clientId,e);
			return new ArrayList<Makers>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of audit firm Maker  :"+APIConstant.GET_AUDIt_FIRM_MAKER_LIST+ " client id :"+clientId, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_AUDITFIRMMAKER_FAILURE);
		}
	}

	@Override
	public List<Checkers> getListOfAuditFirmChecker(Integer clientId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_AUDIt_FIRM_CHECKER_LIST,new Object[]{clientId},new AuditFirmCheckerRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_AUDIt_FIRM_CHECKER_LIST+ " client id :"+clientId,e);
			return new ArrayList<Checkers>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of audit firm checkers  :"+APIConstant.GET_AUDIt_FIRM_CHECKER_LIST+ " client id :"+clientId, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_AUDITFIRMCHECKER_FAILURE);
		}
	}

	@Override
	public List<BranchNameResponse> getListOfBranchNames(Integer clientId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_BRANCHUSER_LIST,new Object[]{clientId},new BranchNameRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_BRANCHUSER_LIST+ " client id :"+clientId,e);
			return new ArrayList<BranchNameResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of branch name  :"+APIConstant.GET_BRANCHUSER_LIST+ " client id :"+clientId, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_BRANCHNAME_FAILURE);
		}
	}

	@Override
	public List<ComercialCreditFacilityDetails> getCommercialCreditFacilities(
			ComercialCreditFacilityRequest comercialCreditFacilityRequest) throws DataAccessException {
		try {
			if(!StringUtils.isEmpty(comercialCreditFacilityRequest.getE2eNumber()))
			  return jdbcTemplate.query(APIConstant.GET_COMMERCIAL_CREDIT_FACILITIES_LIST,new Object[]{comercialCreditFacilityRequest.getE2eNumber()},new CommercialCreditFacilityRowMapper());
			else {
				ComercialCreditFacilityDetails commDetails = new ComercialCreditFacilityDetails();
				List<ComercialCreditFacilityDetails> commerDetailList = new ArrayList<>();
				commDetails.setLoanAppId("");
				commDetails.setAccountNum("");
				commDetails.setSanctionedLimitWords("");
				commerDetailList.add(commDetails);
				return commerDetailList;
			}
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned fro commercial credit facilities from db for query :"+APIConstant.GET_COMMERCIAL_CREDIT_FACILITIES_LIST+ " loan application num :"+comercialCreditFacilityRequest.getLoanApplicationNum()+e);
			return new ArrayList<ComercialCreditFacilityDetails>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of commercial credit facilities  :"+APIConstant.GET_COMMERCIAL_CREDIT_FACILITIES_LIST+ " loan application num :"+comercialCreditFacilityRequest.getLoanApplicationNum()+ ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_COMMERCIAL_CREDIT_FACILITIES_FAILURE);
		}
	}

	@Override
	public List<CifRegistrationResponse> getListOfCIF(String clientId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_CIF_LIST,new Object[]{Integer.parseInt(clientId)},new CIFRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_CIF_LIST+e);
			return new ArrayList<CifRegistrationResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of CIF numbers  :"+APIConstant.GET_CIF_LIST+ ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_CIF_FAILURE);
		}
	}

	@Override
	public List<BranchMakerResponse> getBranchMaker(Integer clientGroupId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_BRANCH_MAKER_LIST,new Object[]{clientGroupId},new BranchMakerRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_BRANCH_MAKER_LIST,e);
			return new ArrayList<BranchMakerResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of branch makers  :"+APIConstant.GET_BRANCH_MAKER_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_BRANCH_MAKER_FAILURE);
		}
	}

	@Override
	public List<BranchCheckerResponse> getBranchChecker(Integer clientGroupId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_BRANCH_CHECKER_LIST,new Object[]{clientGroupId},new BranchCheckerRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_BRANCH_CHECKER_LIST,e);
			return new ArrayList<BranchCheckerResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of branch checkers  :"+APIConstant.GET_BRANCH_CHECKER_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_BRANCH_CHECKER_FAILURE);
		}
	}

	@Override
	public List<BranchSAResponse> getBranchSA(Integer clientGroupId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_BRANCH_SA_LIST,new Object[]{clientGroupId},new BranchSARowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_BRANCH_SA_LIST,e);
			return new ArrayList<BranchSAResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of branch SAs  :"+APIConstant.GET_BRANCH_SA_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_BRANCH_SA_FAILURE);
		}
	}

	@Override
	public List<LoanSAResponse> getLoanSA(Integer clientGroupId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_LOAN_SA_LIST,new Object[]{clientGroupId,clientGroupId,clientGroupId,clientGroupId},new LoanSARowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_LOAN_SA_LIST,e);
			return new ArrayList<LoanSAResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of Loan SAs  :"+APIConstant.GET_LOAN_SA_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_LOAN_SA_FAILURE);
		}
	}

	@Override
	public List<BorrowerCategory> getListOfBorrowerCategory() throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_BORROWER_CATEGORY_LIST,new BorrowerCategoryRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_BORROWER_CATEGORY_LIST,e);
			return new ArrayList<BorrowerCategory>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of borrower category :"+APIConstant.GET_BORROWER_CATEGORY_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_BORROWER_CATEGORY_FAILURE);
		}
	}

	@Override
	public List<MovableProperty> getListOfMovableProperties() throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_MOVABLE_PROPERTY_LIST,new MovablePropertyRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_MOVABLE_PROPERTY_LIST,e);
			return new ArrayList<MovableProperty>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of movable property :"+APIConstant.GET_MOVABLE_PROPERTY_LIST, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_MOVABLE_PROPERTY_FAILURE);
		}
	}

	@Override
	public AutoGeneratedResponse getAutoGeneratedDetails(String loanAppId) throws DataAccessException {
		AutoGeneratedResponse autoResp = null;
		try {
			  List<AutoGeneratedResponse> resp =  jdbcTemplate.query(APIConstant.GET_AUTO_GENERATED_DATA,new Object[]{loanAppId},new AutoGeneratedRowMapper());
			  if(null!=resp && !CollectionUtils.isEmpty(resp)) {
				  autoResp =  resp.get(0); 
			  }
		} catch (EmptyResultDataAccessException e) {
			logger.error("No auto generated response data returned from db for query :"+APIConstant.GET_AUTO_GENERATED_DATA,e);
			return new AutoGeneratedResponse();
	    } catch (Exception ex) {
			logger.error("Exception while getting auto generated response :"+APIConstant.GET_AUTO_GENERATED_DATA, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_AUTO_GENERATED_DATA_FAILURE);
		}
		return autoResp;
	}

	@Override
	public AdministrativeResponse saveAdministrativeDetails(AdministrativeRequest adminRequest)
			throws DataAccessException {
		AdministrativeResponse administrativeResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funce2eadministrativedetails(?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, adminRequest.getE2eNumber());
			cs.setString(2, adminRequest.getUnitChecker());
			
			if(!StringUtils.isEmpty(adminRequest.getLoanSanctionAuthority()))
				cs.setString(3, adminRequest.getLoanSanctionAuthority());
			else 
				cs.setString(3, "");
			if(!StringUtils.isEmpty(adminRequest.getNumReviewsCompleted()))
				//cs.setString(4, adminRequest.getNumReviewsCompleted());
				cs.setInt(4, Integer.parseInt(adminRequest.getNumReviewsCompleted()));
			else 
				//cs.setString(4, "");
				cs.setInt(4, 0);
			
			cs.registerOutParameter(5, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(5);
			logger.info("Function result code returned after execution of function funce2eadministrativedetails :{}",functionResult);
			administrativeResponse = new AdministrativeResponse();
			administrativeResponse.setMessageCode(functionResult);
			return administrativeResponse;
		} catch (SQLException e) {
			logger.error("unable to execute the function funce2eadministrativedetails",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funce2eadministrativedetails",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_ADMINISTRATIVE_DETAILS_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funce2eadministrativedetails");
			}
		}
	}

	@Override
	public List<UnitChecker> getListOfUnitChecker(String clientGroupId) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_UNIT_CHECKER_LIST,new Object[]{Integer.parseInt(clientGroupId)},new UnitCheckerRowMapper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_UNIT_CHECKER_LIST+ " clientGroupId :"+clientGroupId,e);
			return new ArrayList<UnitChecker>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of unit checkers  :"+APIConstant.GET_UNIT_CHECKER_LIST+ " clientGroupId :"+clientGroupId, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_UNITCHECKER_FAILURE);
		}
	}

	@Override
	public UnitChecker getDefaultUnitChecker(String e2eNum) throws DataAccessException {
		UnitChecker uc  =  null;
		try {
			  List<UnitChecker> ucList =  jdbcTemplate.query(APIConstant.GET_DEFAULT_UNIT_CHECKER_LIST,new Object[]{e2eNum},new DefaultUnitCheckerRowMapper());
			  if(null!=ucList && !CollectionUtils.isEmpty(ucList)) {
				  uc = ucList.get(0); 
			  }
		} catch (EmptyResultDataAccessException e) {
			logger.error("No default unit checker returned from db for query :"+APIConstant.GET_DEFAULT_UNIT_CHECKER_LIST+ " e2eNum :"+e2eNum,e);
			return new UnitChecker();
	    } catch (Exception ex) {
			logger.error("Exception while getting default unit checker  :"+APIConstant.GET_DEFAULT_UNIT_CHECKER_LIST+ " e2eNum :"+e2eNum, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_DEFAULT_UNITCHECKER_FAILURE);
		}
		return uc;
	}

	@Override
	public DueDeligenceGeneralInfoResponse saveDueDiligenceGeneralInfo(DueDeligenceGeneralInfoRequest dueDeligenceRequest)
			throws DataAccessException {
		DueDeligenceGeneralInfoResponse dueDeligenceGeneralInfoResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funce2egeneralinformation(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, dueDeligenceRequest.getE2eNumber());
			cs.setString(2, dueDeligenceRequest.getLoanApplnNumber2());
			if(!StringUtils.isEmpty(dueDeligenceRequest.getAcceptanceDate())) {
				java.sql.Date loanSanctionDate
				= new java.sql.Date(dueDeligenceRequest.getAcceptanceDate().getTime());
				cs.setDate(3, loanSanctionDate);
        		
			} else {
				cs.setDate(3, null);
        	}
			if(!StringUtils.isEmpty(dueDeligenceRequest.getSanctionedLoanAmount()))
					cs.setInt(4, Integer.parseInt(dueDeligenceRequest.getSanctionedLoanAmount()));
			else 
				cs.setInt(4, -1);
			cs.setString(5, dueDeligenceRequest.getSanctionedLoanAmountWords());
			if(!StringUtils.isEmpty(dueDeligenceRequest.getLoanTenure2()))
				cs.setInt(6, Integer.parseInt(dueDeligenceRequest.getLoanTenure2()));
			else 
				cs.setInt(6,-1);
			if(!StringUtils.isEmpty(dueDeligenceRequest.getRevisedLoanTenure2()))
				cs.setInt(7, Integer.parseInt(dueDeligenceRequest.getRevisedLoanTenure2()));
			else
				cs.setInt(7,-1);
			if(!StringUtils.isEmpty(dueDeligenceRequest.getDisbursementDate())) {
				java.sql.Date disbursementDate
				= new java.sql.Date(dueDeligenceRequest.getDisbursementDate().getTime());
				cs.setDate(8, disbursementDate);
        		
			} else {
				cs.setDate(8, null);
        	}
			
			if(!StringUtils.isEmpty(dueDeligenceRequest.getM4CurrentReviewSanctionDate())) {
				java.sql.Date m4CurrentReviewSanctionDate
				= new java.sql.Date(dueDeligenceRequest.getM4CurrentReviewSanctionDate().getTime());
				cs.setDate(9, m4CurrentReviewSanctionDate);
        		
			} else {
				cs.setDate(9, null);
        	}
			if(!StringUtils.isEmpty(dueDeligenceRequest.getPresentStatus())) {
				cs.setInt(10, Integer.parseInt(dueDeligenceRequest.getPresentStatus()));
			} else {
				cs.setInt(10,-1);
			}
			cs.setString(11, dueDeligenceRequest.getReleaseOfSecurityOnAccountClosure());
			
			if(!StringUtils.isEmpty(dueDeligenceRequest.getDateOfClosureOfLoan())) {
				java.sql.Date dateOfClosureOfLoan
				= new java.sql.Date(dueDeligenceRequest.getDateOfClosureOfLoan().getTime());
				cs.setDate(12, dateOfClosureOfLoan);
        		
			} else {
				cs.setDate(12, null);
        	}
			if(!StringUtils.isEmpty(dueDeligenceRequest.getSelectedAccountType())) {
				cs.setInt(13, Integer.parseInt(dueDeligenceRequest.getSelectedAccountType()));
			} else {
				cs.setInt(13, -1);
			}
			if(!StringUtils.isEmpty(dueDeligenceRequest.getSelectedBorrowerType())) {
				cs.setInt(14, Integer.parseInt(dueDeligenceRequest.getSelectedBorrowerType()));
			} else {
				cs.setInt(14,-1);
			}
			if(!StringUtils.isEmpty(dueDeligenceRequest.getSelectedBorrowerCategory())) {
				cs.setInt(15, Integer.parseInt(dueDeligenceRequest.getSelectedBorrowerCategory()));
			} else {
				cs.setInt(15,-1);
			}
//			long millis=System.currentTimeMillis();
//			java.sql.Date defaultDate=new java.sql.Date(millis);
			Calendar cal = Calendar.getInstance();
	        java.util.Date defaultDate = cal.getTime();
			if(null!=dueDeligenceRequest.getCommercialCreditFacilityDetails() && dueDeligenceRequest.getCommercialCreditFacilityDetails().size()>0) {
				String[] arrLoanFacilities =  new String[dueDeligenceRequest.getCommercialCreditFacilityDetails().size()];
				int i =0;
				for(LoanFacility arr: dueDeligenceRequest.getCommercialCreditFacilityDetails()) {
					String inputData = "("+(arr.getFacility() != null ? arr.getFacility() : -1)
				            +",\""+arr.getAccountNum()+"\","
			        		+"\""+(arr.getDateOfSanction()==null? defaultDate: arr.getDateOfSanction())+"\","
							+(arr.getSanctionedLimit() != null ? arr.getSanctionedLimit() : -1 )+","
							+"\""+arr.getSanctionedLimitWords()+"\","
							+(arr.getLoanTenor() != null ? arr.getLoanTenor() : -1 )+")";
					arrLoanFacilities[i] = inputData;
					i++;
				}
				logger.info("arrLoanFacilities.length"+arrLoanFacilities.length);
				logger.info("arrLoanFacilities.[0]"+arrLoanFacilities[0]);
				cs.setArray(16,connection.createArrayOf("bmadmin.obj_loan_facilities",arrLoanFacilities));
			} else {
				cs.setArray(16,connection.createArrayOf("bmadmin.obj_loan_facilities",new String[]{}));
			}
			
			cs.registerOutParameter(17, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(17);
			logger.info("Function result code returned after execution of function funce2egeneralinformation :",functionResult);
			dueDeligenceGeneralInfoResponse = new DueDeligenceGeneralInfoResponse();
			dueDeligenceGeneralInfoResponse.setMessageCode(functionResult);
			return dueDeligenceGeneralInfoResponse;
		} catch (SQLException e) {
			logger.error("unable to execute the function funce2egeneralinformation",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funce2egeneralinformation",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUEDILIGENCE_GENERAL_INFO_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funce2egeneralinformation");
			}
		}
	}

	@Override
	public DueDeligenceGeneralInfoResponse getDueDiligenceGeneralInfo(String e2eNum) throws DataAccessException {
		DueDeligenceGeneralInfoResponse generalInfoResponse  =  null;
		try {
			  List<DueDeligenceGeneralInfoResponse> generalInfoResponseList =  
					  jdbcTemplate.query(APIConstant.GET_DUE_DILIGENCE_GENERAL_INFO,new Object[]{e2eNum},
							  new DueDiligenceResponseRowMapper());
			  if(null!=generalInfoResponseList && !CollectionUtils.isEmpty(generalInfoResponseList)) {
				  generalInfoResponse = generalInfoResponseList.get(0); 
			  }
		} catch (EmptyResultDataAccessException e) {
			logger.error("No general info of due diligence returned from db for query :"+APIConstant.GET_DUE_DILIGENCE_GENERAL_INFO+ " e2eNum :"+e2eNum,e);
			return new DueDeligenceGeneralInfoResponse();
	    } catch (Exception ex) {
			logger.error("Exception while getting general info of due diligence :"+APIConstant.GET_DUE_DILIGENCE_GENERAL_INFO+ " e2eNum :"+e2eNum, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_DUE_DILIGENCE_GENERAL_INFO_FAILURE);
		}
		return generalInfoResponse;
	}

	@Override
	public DueDeligenceCoApplicantResponse saveDueDiligenceCoApplicant(
			DueDeligenceCoApplicantRequest dueDeligenceRequest) throws DataAccessException {
		DueDeligenceCoApplicantResponse dueDeligenceCoApplicantResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funce2ecoapplicantdetails(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, dueDeligenceRequest.getE2eNumber());
			cs.setString(2, dueDeligenceRequest.getCoapplicantName());
			cs.setString(3, String.valueOf(dueDeligenceRequest.getCoappDesignation()));
			cs.setString(4, dueDeligenceRequest.getCoapplicantName1());
			cs.setString(5, String.valueOf(dueDeligenceRequest.getCoappDesignation1()));
			cs.setString(6, dueDeligenceRequest.getCoapplicantName2());
			cs.setString(7, String.valueOf(dueDeligenceRequest.getCoappDesignation2()));
			cs.setString(8, dueDeligenceRequest.getCoapplicantName3());
			cs.setString(9, String.valueOf(dueDeligenceRequest.getCoappDesignation3()));
			cs.setString(10, dueDeligenceRequest.getCoapplicantName4());
			cs.setString(11, String.valueOf(dueDeligenceRequest.getCoappDesignation4()));
			cs.setString(12, dueDeligenceRequest.getGuarantorName());
			cs.setString(13, dueDeligenceRequest.getGuarantorName1());
			cs.setString(14, dueDeligenceRequest.getGuarantorName2());
			cs.setString(15, dueDeligenceRequest.getGuarantorName3());
			cs.setString(16, dueDeligenceRequest.getGuarantorName4());
			if(!StringUtils.isEmpty(dueDeligenceRequest.getLoanSecurity())) {
				cs.setInt(17, Integer.parseInt(dueDeligenceRequest.getLoanSecurity()));
			} else {
				cs.setInt(17, -1);
			}
			if(!StringUtils.isEmpty(dueDeligenceRequest.getSecurityType())) {
				cs.setInt(18, Integer.parseInt(dueDeligenceRequest.getSecurityType()));
			} else {
				cs.setInt(18, -1);
			}
			
			if(null!=dueDeligenceRequest.getMoveAbleProperties() && dueDeligenceRequest.getMoveAbleProperties().size()>0) {
				String[] arrMoveableProperties =  new String[dueDeligenceRequest.getMoveAbleProperties().size()];
				int i =0;
				for(String arr: dueDeligenceRequest.getMoveAbleProperties()) {
					String inputData = "("+arr+")";
					arrMoveableProperties[i] = inputData;
					i++;
				}
				
				cs.setArray(19,connection.createArrayOf("bmadmin.obj_movable_property",arrMoveableProperties));
			} else {
				cs.setArray(19,connection.createArrayOf("bmadmin.obj_movable_property",new String[]{}));
			}
			
			cs.registerOutParameter(20, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(20);
			logger.info("Function result code returned after execution of function funce2ecoapplicantdetails :",functionResult);
			dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
			dueDeligenceCoApplicantResponse.setMessageCode(functionResult);
//			if(null!=dueDeligenceRequest.getCoApplicantDetails() && dueDeligenceRequest.getCoApplicantDetails().size()>0) {
//				for(CoApplicantDetails c : dueDeligenceRequest.getCoApplicantDetails()) {
//				   if("CoApplicant".equalsIgnoreCase(c.getProfile())) {
//					   if(c.getSelectedCoApplicant()) {
//						   cs.setString(2,c.getCoapplicantName());
//						   cs.setString(3,c.getCoappDesignation());
//				   		} else {
//				   			cs.setString(2,"");
//				   			cs.setString(3,"");
//				   		}
//				   } else if("CoApplicant1".equalsIgnoreCase(c.getProfile())) {
//					   if(c.getSelectedCoApplicant()) {
//						   cs.setString(4,c.getCoapplicantName());
//						   cs.setString(5,c.getCoappDesignation());
//				   		} else {
//				   			cs.setString(4,"");
//				   			cs.setString(5,"");
//				   		}
//				   } else if("CoApplicant2".equalsIgnoreCase(c.getProfile())) {
//					   if(c.getSelectedCoApplicant()) {
//						   cs.setString(6,c.getCoapplicantName());
//						   cs.setString(7,c.getCoappDesignation());
//				   		} else {
//				   			cs.setString(6,"");
//				   			cs.setString(7,"");
//				   		}
//				   } else if("CoApplicant3".equalsIgnoreCase(c.getProfile())) {
//					   if(c.getSelectedCoApplicant()) {
//						   cs.setString(8,c.getCoapplicantName());
//						   cs.setString(9,c.getCoappDesignation());
//				   		} else {
//				   			cs.setString(8,"");
//				   			cs.setString(9,"");
//				   		}
//				   } else if("CoApplicant4".equalsIgnoreCase(c.getProfile())) {
//					   if(c.getSelectedCoApplicant()) {
//						   cs.setString(10,c.getCoapplicantName());
//						   cs.setString(11,c.getCoappDesignation());
//				   		} else {
//				   			cs.setString(10,"");
//				   			cs.setString(11,"");
//				   		}
//				   } 
//				}
//			}
//			if(null!=dueDeligenceRequest.getGurantorDetails() && dueDeligenceRequest.getGurantorDetails().size()>0) {
//				for(GuarantorDetails c : dueDeligenceRequest.getGurantorDetails()) {
//				   if("Guarantor".equalsIgnoreCase(c.getGuarantorName())) {
//					   if(c.isSelectedGurantor()) {
//						   cs.setString(12,c.getGuarantorDesc());
//				   		} else {
//				   			cs.setString(12,"");
//				   		}
//				   } else if("Guarantor1".equalsIgnoreCase(c.getGuarantorName())) {
//					   if(c.isSelectedGurantor()) {
//						   cs.setString(13,c.getGuarantorDesc());
//				   		} else {
//				   			cs.setString(13,"");
//				   		}
//				   } else if("Guarantor2".equalsIgnoreCase(c.getGuarantorName())) {
//					   if(c.isSelectedGurantor()) {
//						   cs.setString(14,c.getGuarantorDesc());
//				   		} else {
//				   			cs.setString(14,"");
//				   		}
//				   } else if("Guarantor3".equalsIgnoreCase(c.getGuarantorName())) {
//					   if(c.isSelectedGurantor()) {
//						   cs.setString(15,c.getGuarantorDesc());
//				   		} else {
//				   			cs.setString(15,"");
//				   		}
//				   } else if("Guarantor4".equalsIgnoreCase(c.getGuarantorName())) {
//					   if(c.isSelectedGurantor()) {
//						   cs.setString(16,c.getGuarantorDesc());
//				   		} else {
//				   			cs.setString(16,"");
//				   		}
//				   }
//				}
//			}
//			
//			cs.setInt(17, Integer.parseInt(dueDeligenceRequest.getLoanSecurity()));
//			cs.setInt(18, Integer.parseInt(dueDeligenceRequest.getSecurityType()));
			
			return dueDeligenceCoApplicantResponse;
		} 
		catch (SQLException e) {
			logger.error("unable to execute the function funce2ecoapplicantdetails",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} 
		catch (Exception e) {
			logger.error("unable to execute the function funce2ecoapplicantdetails",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUEDILIGENCE_CO_APPLICANT_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funce2ecoapplicantdetails");
			}
		}
	}

	@Override
	public DueDeligenceCoApplicantRequest getDueDiligenceCoApplicantDetails(String e2eNum) throws DataAccessException {
//		List<DueDeligenceCoApplicantResponse> coApplicantList = null;
//		DueDeligenceCoApplicantResponse dueDeligenceCoApplicantResponse = null;
		DueDeligenceCoApplicantRequest dueDeligenceCoApplicantRequest = new DueDeligenceCoApplicantRequest();
		List<DueDeligenceCoApplicantRequest> responses = new ArrayList<>();
		try {
			responses = jdbcTemplate.query(APIConstant.GET_CO_APP_LIST,new Object[]{e2eNum}, new DueDeligenceCoAppRowMapper());
			
			if(CollectionUtils.isNotEmpty(responses)) {
				dueDeligenceCoApplicantRequest = responses.get(0);
			} else {
				logger.info("InitiateDueDeligenceRepositoryImpl :: getDueDiligenceCoApplicantDetails :: No data availablele for e2e number {}",e2eNum);
			}
			
//			if(null!=e2eNum && !StringUtils.isEmpty(e2eNum) && !"new".equalsIgnoreCase(e2eNum)) {
//				List<DueDeligenceCoApplicantResponse> coAppList = jdbcTemplate.query(APIConstant.GET_CO_APP_LIST,new Object[]{e2eNum},new DueDiligenceCoAppResponseRowMapper());
//				if(!CollectionUtils.isEmpty(coAppList)) {
//					coApplicantList = new ArrayList<>();
//					DueDeligenceCoApplicantResponse coAppResponse = coAppList.get(0);
//					if(!StringUtils.isEmpty(coAppResponse.getCoapplicant())) {
//						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
//						dueDeligenceCoApplicantResponse.setSelectedCoApplicant(true);
//						dueDeligenceCoApplicantResponse.setProfile("CoApplicant");
//						dueDeligenceCoApplicantResponse.setCoapplicantName(coAppResponse.getCoapplicant());
//						dueDeligenceCoApplicantResponse.setCoappDesignation(coAppResponse.getCoapplicantdesignation());
//						coApplicantList.add(dueDeligenceCoApplicantResponse);
//					}
//					if(!StringUtils.isEmpty(coAppResponse.getCoapplicant1())) {
//						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
//						dueDeligenceCoApplicantResponse.setSelectedCoApplicant(true);
//						dueDeligenceCoApplicantResponse.setProfile("CoApplicant1");
//						dueDeligenceCoApplicantResponse.setCoapplicantName(coAppResponse.getCoapplicant1());
//						dueDeligenceCoApplicantResponse.setCoappDesignation(coAppResponse.getCoapplicant1designation());
//						coApplicantList.add(dueDeligenceCoApplicantResponse);
//					}
//					if(!StringUtils.isEmpty(coAppResponse.getCoapplicant2())) {
//						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
//						dueDeligenceCoApplicantResponse.setSelectedCoApplicant(true);
//						dueDeligenceCoApplicantResponse.setProfile("CoApplicant2");
//						dueDeligenceCoApplicantResponse.setCoapplicantName(coAppResponse.getCoapplicant2());
//						dueDeligenceCoApplicantResponse.setCoappDesignation(coAppResponse.getCoapplicant2designation());
//						coApplicantList.add(dueDeligenceCoApplicantResponse);
//					}
//					if(!StringUtils.isEmpty(coAppResponse.getCoapplicant3())) {
//						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
//						dueDeligenceCoApplicantResponse.setSelectedCoApplicant(true);
//						dueDeligenceCoApplicantResponse.setProfile("CoApplicant3");
//						dueDeligenceCoApplicantResponse.setCoapplicantName(coAppResponse.getCoapplicant3());
//						dueDeligenceCoApplicantResponse.setCoappDesignation(coAppResponse.getCoapplicant3designation());
//						coApplicantList.add(dueDeligenceCoApplicantResponse);
//					}
//					if(!StringUtils.isEmpty(coAppResponse.getCoapplicant4())) {
//						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
//						dueDeligenceCoApplicantResponse.setSelectedCoApplicant(true);
//						dueDeligenceCoApplicantResponse.setProfile("CoApplicant4");
//						dueDeligenceCoApplicantResponse.setCoapplicantName(coAppResponse.getCoapplicant4());
//						dueDeligenceCoApplicantResponse.setCoappDesignation(coAppResponse.getCoapplicant4designation());
//						coApplicantList.add(dueDeligenceCoApplicantResponse);
//					}
//				}
//			} else {
//				List<DueDeligenceCoApplicantResponse> emptyCoApplicantList = new ArrayList<>();
//				DueDeligenceCoApplicantResponse emptyDueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantResponse();
//				emptyDueDeligenceCoApplicantResponse.setSelectedCoApplicant(false);
//				emptyDueDeligenceCoApplicantResponse.setProfile("CoApplicant");
//				emptyDueDeligenceCoApplicantResponse.setCoapplicantName("");
//				emptyDueDeligenceCoApplicantResponse.setCoappDesignation("");
//				emptyCoApplicantList.add(emptyDueDeligenceCoApplicantResponse);
//				
//				emptyDueDeligenceCoApplicantResponse.setSelectedCoApplicant(false);
//				emptyDueDeligenceCoApplicantResponse.setProfile("CoApplicant1");
//				emptyDueDeligenceCoApplicantResponse.setCoapplicantName("");
//				emptyDueDeligenceCoApplicantResponse.setCoappDesignation("");
//				emptyCoApplicantList.add(emptyDueDeligenceCoApplicantResponse);
//				
//				emptyDueDeligenceCoApplicantResponse.setSelectedCoApplicant(false);
//				emptyDueDeligenceCoApplicantResponse.setProfile("CoApplicant2");
//				emptyDueDeligenceCoApplicantResponse.setCoapplicantName("");
//				emptyDueDeligenceCoApplicantResponse.setCoappDesignation("");
//				emptyCoApplicantList.add(emptyDueDeligenceCoApplicantResponse);
//				
//				emptyDueDeligenceCoApplicantResponse.setSelectedCoApplicant(false);
//				emptyDueDeligenceCoApplicantResponse.setProfile("CoApplicant3");
//				emptyDueDeligenceCoApplicantResponse.setCoapplicantName("");
//				emptyDueDeligenceCoApplicantResponse.setCoappDesignation("");
//				emptyCoApplicantList.add(emptyDueDeligenceCoApplicantResponse);
//				
//				emptyDueDeligenceCoApplicantResponse.setSelectedCoApplicant(false);
//				emptyDueDeligenceCoApplicantResponse.setProfile("CoApplicant4");
//				emptyDueDeligenceCoApplicantResponse.setCoapplicantName("");
//				emptyDueDeligenceCoApplicantResponse.setCoappDesignation("");
//				emptyCoApplicantList.add(emptyDueDeligenceCoApplicantResponse);
				
				//return emptyCoApplicantList;
			
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_CO_APP_LIST+ " for e2eNum :"+e2eNum,e);
			return dueDeligenceCoApplicantRequest;
	    } catch (Exception ex) {
			logger.error("Exception while getting list of coApplicants :"+APIConstant.GET_CO_APP_LIST+ " for e2eNum :"+e2eNum, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_DUE_DILIGENCE_CO_APPLICANT_FAILURE);
		}
	  return dueDeligenceCoApplicantRequest;
	}

	@Override
	public DueDeligenceCoApplicantResponse getDueDiligenceCollateralSecurity(String e2eNum) throws DataAccessException {
		DueDeligenceCoApplicantResponse uc  =  null;
		try {
			  List<DueDeligenceCoApplicantResponse> ucList =  jdbcTemplate.query(APIConstant.GET_COLLATERAL_SECURITY,new Object[]{e2eNum},new CollateralSecurityRowMapper());
			  if(null!=ucList && !CollectionUtils.isEmpty(ucList)) {
				  uc = ucList.get(0); 
			  }
		} catch (EmptyResultDataAccessException e) {
			logger.error("No collateral security returned from db for query :"+APIConstant.GET_COLLATERAL_SECURITY+ " e2eNum :"+e2eNum,e);
			return new DueDeligenceCoApplicantResponse();
	    } catch (Exception ex) {
			logger.error("Exception while getting collateral security  :"+APIConstant.GET_COLLATERAL_SECURITY+ " e2eNum :"+e2eNum, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_DEFAULT_UNITCHECKER_FAILURE);
		}
		return uc;
	}

	@Override
	public List<DueDeligenceCoApplicantGurantorResponse> getDueDiligenceGurantor(String e2eNum)
			throws DataAccessException {
		List<DueDeligenceCoApplicantGurantorResponse> coApplicantGurantorList = null;
		DueDeligenceCoApplicantGurantorResponse dueDeligenceCoApplicantResponse = null;
		try {
			if(null!=e2eNum && !StringUtils.isEmpty(e2eNum) && !"new".equalsIgnoreCase(e2eNum)) {
				List<DueDeligenceCoApplicantGurantorResponse> coAppList = jdbcTemplate.query(APIConstant.GET_CO_APP_GURANTOR_LIST,
						new Object[]{e2eNum},new DueDiligenceCoAppGurantorResponseRowMapper());
				if(!CollectionUtils.isEmpty(coAppList)) {
					coApplicantGurantorList = new ArrayList<>();
					DueDeligenceCoApplicantGurantorResponse coAppResponse = coAppList.get(0);
					if(!StringUtils.isEmpty(coAppResponse.getGuarantor())) {
						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantGurantorResponse();
						dueDeligenceCoApplicantResponse.setSelectedGurantor(true);
						dueDeligenceCoApplicantResponse.setGuarantorName("Guarantor");
						dueDeligenceCoApplicantResponse.setGuarantorDesc(coAppResponse.getGuarantor());
						coApplicantGurantorList.add(dueDeligenceCoApplicantResponse);
					}
					if(!StringUtils.isEmpty(coAppResponse.getGuarantor1())) {
						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantGurantorResponse();
						dueDeligenceCoApplicantResponse.setSelectedGurantor(true);
						dueDeligenceCoApplicantResponse.setGuarantorName("Guarantor1");
						dueDeligenceCoApplicantResponse.setGuarantorDesc(coAppResponse.getGuarantor1());
						coApplicantGurantorList.add(dueDeligenceCoApplicantResponse);
					}
					if(!StringUtils.isEmpty(coAppResponse.getGuarantor2())) {
						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantGurantorResponse();
						dueDeligenceCoApplicantResponse.setSelectedGurantor(true);
						dueDeligenceCoApplicantResponse.setGuarantorName("Guarantor2");
						dueDeligenceCoApplicantResponse.setGuarantorDesc(coAppResponse.getGuarantor2());
						coApplicantGurantorList.add(dueDeligenceCoApplicantResponse);
					}
					if(!StringUtils.isEmpty(coAppResponse.getGuarantor3())) {
						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantGurantorResponse();
						dueDeligenceCoApplicantResponse.setSelectedGurantor(true);
						dueDeligenceCoApplicantResponse.setGuarantorName("Guarantor3");
						dueDeligenceCoApplicantResponse.setGuarantorDesc(coAppResponse.getGuarantor3());
						coApplicantGurantorList.add(dueDeligenceCoApplicantResponse);
					}
					if(!StringUtils.isEmpty(coAppResponse.getGuarantor4())) {
						dueDeligenceCoApplicantResponse = new DueDeligenceCoApplicantGurantorResponse();
						dueDeligenceCoApplicantResponse.setSelectedGurantor(true);
						dueDeligenceCoApplicantResponse.setGuarantorName("Guarantor4");
						dueDeligenceCoApplicantResponse.setGuarantorDesc(coAppResponse.getGuarantor4());
						coApplicantGurantorList.add(dueDeligenceCoApplicantResponse);
					}
				}
			} else {
				List<DueDeligenceCoApplicantGurantorResponse> emptyGurantorList = new ArrayList<>();
				DueDeligenceCoApplicantGurantorResponse emptyDueDeligenceGurantorResponse = new DueDeligenceCoApplicantGurantorResponse();
				emptyDueDeligenceGurantorResponse.setSelectedGurantor(false);
				emptyDueDeligenceGurantorResponse.setGuarantorName("Guarantor");
				emptyDueDeligenceGurantorResponse.setGuarantorDesc("");
				emptyGurantorList.add(emptyDueDeligenceGurantorResponse);
				emptyDueDeligenceGurantorResponse = new DueDeligenceCoApplicantGurantorResponse();
				emptyDueDeligenceGurantorResponse.setSelectedGurantor(false);
				emptyDueDeligenceGurantorResponse.setGuarantorName("Guarantor1");
				emptyDueDeligenceGurantorResponse.setGuarantorDesc("");
				emptyGurantorList.add(emptyDueDeligenceGurantorResponse);
				emptyDueDeligenceGurantorResponse = new DueDeligenceCoApplicantGurantorResponse();
				emptyDueDeligenceGurantorResponse.setSelectedGurantor(false);
				emptyDueDeligenceGurantorResponse.setGuarantorName("Guarantor2");
				emptyDueDeligenceGurantorResponse.setGuarantorDesc("");
				emptyGurantorList.add(emptyDueDeligenceGurantorResponse);
				emptyDueDeligenceGurantorResponse = new DueDeligenceCoApplicantGurantorResponse();
				emptyDueDeligenceGurantorResponse.setSelectedGurantor(false);
				emptyDueDeligenceGurantorResponse.setGuarantorName("Guarantor3");
				emptyDueDeligenceGurantorResponse.setGuarantorDesc("");
				emptyGurantorList.add(emptyDueDeligenceGurantorResponse);
				emptyDueDeligenceGurantorResponse = new DueDeligenceCoApplicantGurantorResponse();
				emptyDueDeligenceGurantorResponse.setSelectedGurantor(false);
				emptyDueDeligenceGurantorResponse.setGuarantorName("Guarantor4");
				emptyDueDeligenceGurantorResponse.setGuarantorDesc("");
				emptyGurantorList.add(emptyDueDeligenceGurantorResponse);
				return emptyGurantorList;
			}
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_CO_APP_GURANTOR_LIST+ " for e2eNum :"+e2eNum,e);
			return new ArrayList<DueDeligenceCoApplicantGurantorResponse>();
	    } catch (Exception ex) {
			logger.error("Exception while getting list of gurantor :"+APIConstant.GET_CO_APP_GURANTOR_LIST+ " for e2eNum :"+e2eNum, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_DUE_DILIGENCE_GURANTOR_FAILURE);
		}
		return coApplicantGurantorList;

	}

	@Override
	public List<MovableProperty> getDueDiligenceMoveableProperty(String e2eNum) throws DataAccessException {
		DueDeligenceCoApplicantResponse uc  =  null;
		List<MovableProperty> moveableProperties = new ArrayList<>();
		try {
			  moveableProperties =  jdbcTemplate.query(APIConstant.GET_MOVEABLE_PROPERTY,new Object[]{e2eNum},new MovablePropertyRowMapper());
//			  if(null!=moveablePropList && !CollectionUtils.isEmpty(moveablePropList)) {
//				  uc = new DueDeligenceCoApplicantResponse();
//				  for(MovableProperty m : moveablePropList) {
//					  if(m.getPropertyId() == 1) 
//						  uc.setSecurity_SubType_shares(1);
//				  }
//			  }
			  
			  moveableProperties.forEach(prop-> prop.setChecked(true));
			  
			  
		} catch (EmptyResultDataAccessException e) {
			logger.error("No collateral security returned from db for query :"+APIConstant.GET_COLLATERAL_SECURITY+ " e2eNum :"+e2eNum,e);
			return moveableProperties;
	    } catch (Exception ex) {
			logger.error("Exception while getting collateral security  :"+APIConstant.GET_COLLATERAL_SECURITY+ " e2eNum :"+e2eNum, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_DEFAULT_UNITCHECKER_FAILURE);
		}
		return moveableProperties;
	}

	@Override
	public List<ViewDueDeligenceResponse> viewDueDiligence(ViewDueDeligenceRequest dueDeligenceRequest)
			throws DataAccessException {
		List<ViewDueDeligenceResponse> viewDiligenceList = null;
	    String module1Query  = "";
	    String loanAppId = "";
	    String moduleName = "";
	    try {
	    	List<Module> modules = getModuleName(String.valueOf(dueDeligenceRequest.getLoanAppId()));
	    	moduleName = modules.get(0).getModuleName();
		    loanAppId = String.valueOf(dueDeligenceRequest.getLoanAppId());
			if(!StringUtils.isEmpty(loanAppId)	&& !StringUtils.isEmpty(moduleName)) {
				if(APIConstant.MODULE_NAME_M1.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_HEADER_M1;
				} else if(APIConstant.MODULE_NAME_M2.equalsIgnoreCase(moduleName)) {
					module1Query  = APIConstant.GET_DUE_DILIGENCE_HEADER_M2;
				} else if(APIConstant.MODULE_NAME_M3.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_HEADER_M3;
				} else if(APIConstant.MODULE_NAME_M4.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_HEADER_M4;
				} else if(APIConstant.MODULE_NAME_M5.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_HEADER_M5;
				}
				viewDiligenceList =  jdbcTemplate.query(module1Query,new Object[]{loanAppId},new DueDiligenceHeaderRowMapper());
			} else {
				logger.error("Unable to get due diligence module header as no loanApp id was passed");
				throw new DataAccessException(APIConstant.MSG_NO_HEADER_FOR_DUE_DILIGENCE);
			}

	    } catch (EmptyResultDataAccessException e) {
			logger.error("No header returned from db for query :"+module1Query+ " for loanAppId :"+loanAppId,e);
			return new ArrayList<>();
	    } catch (Exception ex) {
	    	logger.error("Unable to get header for moduleName "+moduleName + " loanAppId :"+loanAppId,ex);
	    	throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
	    }
	    return viewDiligenceList;
	}

	@Override
	public List<ViewDueDeligenceResponse> viewDetailsForDueDiligence(ViewDueDeligenceRequest dueDeligenceRequest)
			throws DataAccessException {
		List<ViewDueDeligenceResponse> viewDiligenceList = null;
	    String module1Query  = "";
	    String loanAppId = "";
	    String moduleName = "";
	    String orderbyClause = " order by dd_sequence ";
	    try {
	    	List<Module> modules = getModuleName(String.valueOf(dueDeligenceRequest.getLoanAppId()));
	    	moduleName = modules.get(0).getModuleName();
		    loanAppId = String.valueOf(dueDeligenceRequest.getLoanAppId());
			if(!StringUtils.isEmpty(loanAppId)	&& !StringUtils.isEmpty(moduleName)) {
				if(APIConstant.MODULE_NAME_M1.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_DETAILS_M1;
				} else if(APIConstant.MODULE_NAME_M2.equalsIgnoreCase(moduleName)) {
					module1Query  = APIConstant.GET_DUE_DILIGENCE_DETAILS_M2;
				} else if(APIConstant.MODULE_NAME_M3.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_DETAILS_M3;
				} else if(APIConstant.MODULE_NAME_M4.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_DETAILS_M4;
				} else if(APIConstant.MODULE_NAME_M5.equalsIgnoreCase(moduleName)) {
					module1Query  =APIConstant.GET_DUE_DILIGENCE_DETAILS_M5;
				}
				
				int cnt = 1;
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader1())  && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader1())) {
					cnt = cnt +1;
				}
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader2())  && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader2())) {
					cnt = cnt +1;
				}
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader3())  && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader3())) {
					cnt = cnt +1;
				}
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader4())  && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader4())) {
					cnt = cnt +1;
				}
				
				Object[] objInput = new Object[cnt];
				int i = 0;
				module1Query = module1Query + " where loan_application_id = "
						+ "(select loan_application_id from bmadmin.bmloanapplication where loan_application_no = ? ) ";
				objInput[i] = dueDeligenceRequest.getLoanAppId();
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader1()) && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader1())) {
					module1Query = module1Query + " and header1= ? ";
					i = i+1;
					objInput[i] = dueDeligenceRequest.getHeader1();
				} else {
					module1Query = module1Query + " and header1 is null";
				}
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader2()) && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader2())) {
					module1Query = module1Query + " and header2= ? ";
					i = i+1;
					objInput[i] = dueDeligenceRequest.getHeader2();
				} else {
					module1Query = module1Query + " and header2 is null";
				}
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader3()) && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader3())) {
					module1Query = module1Query + " and header3= ? ";
					i = i+1;
					objInput[i] = dueDeligenceRequest.getHeader3();
				} else {
					module1Query = module1Query + " and header3 is null";
				}
				if(!StringUtils.isEmpty(dueDeligenceRequest.getHeader4()) && !"null".equalsIgnoreCase(dueDeligenceRequest.getHeader4())) {
					module1Query = module1Query + " and header4= ? ";
					i = i+1;
					objInput[i] = dueDeligenceRequest.getHeader4();
				} else {
					module1Query = module1Query + " and header4 is null";
				}
				module1Query = module1Query + orderbyClause;
				if(APIConstant.MODULE_NAME_M1.equalsIgnoreCase(moduleName)) {
					viewDiligenceList =  jdbcTemplate.query(module1Query,
						objInput,
						new DueDeligenceRowMapper());
				} else {
					viewDiligenceList =  jdbcTemplate.query(module1Query,
							objInput,
							new DueDeligenceNonM1RowMapper());
				}

			} else {
				logger.error("Unable to get due diligence module header as no loanApp id was passed");
				throw new DataAccessException(APIConstant.MSG_NO_DETAILS_FOR_DUE_DILIGENCE);
			}

	    } catch (EmptyResultDataAccessException e) {
			logger.error("No due diligence returned from db for query :"+module1Query+ " for loanAppId :"+loanAppId,e);
			return new ArrayList<>();
	    } catch (Exception ex) {
	    	logger.error("Unable to get diligence for moduleName "+moduleName + " and loanAppId :"+loanAppId,ex);
	    	throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
	    }
	    return viewDiligenceList;
	}
	
	public List<ReportHeaderResponse> getReportingHeader(String e2eNum) {
		List<ReportHeaderResponse> reportHeaderResponseList = new ArrayList<>();

		reportHeaderResponseList = jdbcTemplate.query(APIConstant.QUERY_GET_REPORT_HEADER, new Object[] { e2eNum },
				new ReportingHeaderRowMapper());
		
		return reportHeaderResponseList;
	}
	
	public List<ReportingActionResponse> getReportingAction(String userName) {
		
		return jdbcTemplate.query(APIConstant.QUERY_GET_REPORT_ACTION, new Object[] { userName },
				new ReportingActionRowMapper());
	}
	
	public Boolean isComplianceReportUpdated (String e2eNum) throws DataAccessException {
		//boolean updateStatus = false;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funcupdatecompliancereport(?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, e2eNum);
			cs.registerOutParameter(2, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(2);
			//updateStatus = functionResult.equals("true") ? true : false;
			return functionResult.equals("SUCCESS");
		} catch (SQLException e) {
			logger.error("unable to execute the function funcupdatecompliancereport",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcupdatecompliancereport",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcupdatecompliancereport");
			}
		}	
	}
	
	public List<ReportingTableData> getReportTableData(String e2eNum) {
		return jdbcTemplate.query(APIConstant.QUERY_GET_REPORT_TABLE_DATA, new Object[] { e2eNum },
				new ReportingTableDataRowMapper());
	}
	
	public List<RiskType> getRiskTypeId(Integer clientId) {
		return jdbcTemplate.query(APIConstant.QUERY_GET_RISK_TYPE_ID, new Object[] { clientId },
				new RiskType2RowMapper());
	}
	
	public String getReportUpdateStatus(String userName, String e2eNum, Integer actionId) throws DataAccessException{
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funcloanapplicationstatusupdate(?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, userName);
			cs.setString(2, e2eNum);
			cs.setInt(3, actionId);
			cs.registerOutParameter(4, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(4);
			return functionResult;
		} catch (SQLException e) {
			logger.error("unable to execute the function funcloanapplicationstatusupdate",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcloanapplicationstatusupdate",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcloanapplicationstatusupdate");
			}
		}
	}
	
	public String getDynamicQueryForGenerateReport (String e2eNum, String rowName, String columnName) throws DataAccessException {
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		try {
			String runFunction = "{ call bmadmin.funccompliancereportdownload(?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			cs.setString(1, e2eNum);
			cs.setString(2, rowName);
			cs.setString(3, columnName);
			cs.registerOutParameter(4, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(4);
			return functionResult;
		} catch (SQLException e) {
			logger.error("unable to execute the function funcloanapplicationstatusupdate",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcloanapplicationstatusupdate",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_DUE_DELIGENCE_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcloanapplicationstatusupdate");
			}
		}
	}
	
	public List<ReportData> getReportData(String query) {
		return jdbcTemplate.query(query, new ReportDataRowMapper());
	}
	
	private List<Module> getModuleName(String loanAppNum) throws DataAccessException {
		try {
			  return jdbcTemplate.query(APIConstant.GET_MODULE_NAME,new Object[]{loanAppNum},new ModuleRowMaper());
		} catch (EmptyResultDataAccessException e) {
			logger.error("No user returned from db for query :"+APIConstant.GET_MODULE_NAME+ " loanAppNum :"+loanAppNum,e);
			return new ArrayList<Module>();
	    } catch (Exception ex) {
			logger.error("Exception while getting module Name  :"+APIConstant.GET_MODULE_NAME, ex.getMessage());
			throw new DataAccessException(APIConstant.MSG_GET_MODULENAME_FAILURE);
		}
	}
	
	public SaveViewDDResponse saveViewDDDB (SaveViewDDRequest request) throws DataAccessException {
		SaveViewDDResponse saveViewDDResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		
		try {
			String runFunction = "{ call bmadmin.funcupdateloanapplicationdd_m1(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, request.getUserName());
			cs.setString(2, request.getLoanAppNum());
			cs.setInt(3, request.getSeq());
			cs.setInt(4, Integer.parseInt(request.getParentSeq()));
			
			if(!StringUtils.isEmpty(request.getSchemaNormValue()))
				cs.setString(5, request.getSchemaNormValue());
			else 
				cs.setString(5, "");
			
			if(!StringUtils.isEmpty(request.getApplicantValue()))
				cs.setString(6, request.getApplicantValue());
			else 
				cs.setString(6, "");
			if(!StringUtils.isEmpty(request.getCoAppVal()))
				cs.setString(7, request.getCoAppVal());
			else 
				cs.setString(7, "");
			if(!StringUtils.isEmpty(request.getCoApp1Val()))
				cs.setString(8, request.getCoApp1Val());
			else 
				cs.setString(8, "");
			if(!StringUtils.isEmpty(request.getCoApp2Val()))
				cs.setString(9, request.getCoApp2Val());
			else 
				cs.setString(9, "");
			if(!StringUtils.isEmpty(request.getCoApp3Val()))
				cs.setString(10, request.getCoApp3Val());
			else 
				cs.setString(10, "");
			if(!StringUtils.isEmpty(request.getCoApp4Val()))
				cs.setString(11, request.getCoApp4Val());
			else 
				cs.setString(11, "");
			if(!StringUtils.isEmpty(request.getGurantorVal()))
				cs.setString(12, request.getGurantorVal());
			else 
				cs.setString(12, "");
			if(!StringUtils.isEmpty(request.getGurantor1Val()))
				cs.setString(13, request.getGurantor1Val());
			else 
				cs.setString(13, "");
			if(!StringUtils.isEmpty(request.getGurantor2Val()))
				cs.setString(14, request.getGurantor2Val());
			else 
				cs.setString(14, "");
			if(!StringUtils.isEmpty(request.getGurantor3Val()))
				cs.setString(15, request.getGurantor3Val());
			else 
				cs.setString(15, "");
			if(!StringUtils.isEmpty(request.getGurantor4Val()))
				cs.setString(16, request.getGurantor4Val());
			else 
				cs.setString(16, "");
			if(!StringUtils.isEmpty(request.getComments()))
				cs.setString(17, request.getComments());
			else 
				cs.setString(17, "");
			cs.registerOutParameter(18, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(18);
			logger.info("Function result code returned after execution of function funcupdateloanapplicationdd_m1 :{}",functionResult);
			saveViewDDResponse = new SaveViewDDResponse();
			saveViewDDResponse.setMessageCode(functionResult);
			return saveViewDDResponse;
		} catch (SQLException e) {
			logger.error("unable to execute the function funcupdateloanapplicationdd_m1",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcupdateloanapplicationdd_m1",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_ADMINISTRATIVE_DETAILS_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcupdateloanapplicationdd_m1");
			}
		}
	}
	
	public SaveViewDDResponse saveViewDD_M2_M5_DB (SaveViewDDM2M5Request request) throws DataAccessException {
		SaveViewDDResponse saveViewDDResponse = null;
		Connection connection = null;
		String functionResult = null; 
		CallableStatement cs = null;
		
		try {
			String runFunction = "{ call bmadmin.funcupdateloanapplicationdd_m2_to_m5(?,?,?,?,?,?,?,?) }";
			connection = jdbcTemplate.getDataSource().getConnection();
			cs = connection.prepareCall(runFunction);
			
			cs.setString(1, request.getUserName());
			cs.setString(2, request.getModuleVal());
			cs.setString(3, request.getLoanAppNum());
			cs.setInt(4, request.getSeq());
			cs.setInt(5, Integer.parseInt(request.getParentSeq()));
			
			if(!StringUtils.isEmpty(request.getComplianceValue()))
				cs.setString(6, request.getComplianceValue());
			else 
				cs.setString(6, "");
			
			if(!StringUtils.isEmpty(request.getRemarks()))
				cs.setString(7, request.getRemarks());
			else 
				cs.setString(7, "");
			cs.registerOutParameter(8, Types.VARCHAR);
			cs.executeUpdate();
			functionResult = cs.getString(8);
			logger.info("Function result code returned after execution of function funcupdateloanapplicationdd_m2_to_m5 :{}",functionResult);
			saveViewDDResponse = new SaveViewDDResponse();
			saveViewDDResponse.setMessageCode(functionResult);
			return saveViewDDResponse;
		} catch (SQLException e) {
			logger.error("unable to execute the function funcupdateloanapplicationdd_m2_to_m5",e);
			throw new DataAccessException(APIConstant.ERROR_CODE_ADMINMESAGE);
		} catch (Exception e) {
			logger.error("unable to execute the function funcupdateloanapplicationdd_m2_to_m5",e);
			throw new DataAccessException(APIConstant.MSG_PROCESS_ADMINISTRATIVE_DETAILS_FAILURE);
		} finally {
			try {
				if(null!= cs)
					cs.close();
				if(null!=connection)
					connection.close();
			} catch (SQLException e) {
				logger.error("Unable to close connection after calling function funcupdateloanapplicationdd_m1");
			}
		}
	}
} 
