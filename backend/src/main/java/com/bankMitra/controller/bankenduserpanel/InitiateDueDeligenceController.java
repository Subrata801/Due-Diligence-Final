/**
 * 
 */
package com.bankMitra.controller.bankenduserpanel;


import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import static java.nio.file.Paths.get;

import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Date;
import java.util.List;
import static org.springframework.http.HttpHeaders.CONTENT_DISPOSITION;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.bankMitra.exception.APIException;
import com.bankMitra.exception.ResourceNotFoundException;
import com.bankMitra.model.admin.LoanSchemeRequest;
import com.bankMitra.model.admin.response.ClientDueDeligenceResponse;
import com.bankMitra.model.admin.response.LoanSchemeResponse;
import com.bankMitra.model.admin.response.LoanVariantResponse;
import com.bankMitra.model.bankenduserpanel.request.AdministrativeRequest;
import com.bankMitra.model.bankenduserpanel.request.AuditFirmRequest;
import com.bankMitra.model.bankenduserpanel.request.ComercialCreditFacilityRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceAuditProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceCoApplicantRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceGeneralInfoRequest;
import com.bankMitra.model.bankenduserpanel.request.DueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.NewDueDeligenceProcessRequest;
import com.bankMitra.model.bankenduserpanel.request.ViewDueDeligenceRequest;
import com.bankMitra.model.bankenduserpanel.response.AccountType;
import com.bankMitra.model.bankenduserpanel.response.AdministrativeResponse;
import com.bankMitra.model.bankenduserpanel.response.AutoGeneratedResponse;
import com.bankMitra.model.bankenduserpanel.response.BorrowerCategory;
import com.bankMitra.model.bankenduserpanel.response.BranchCheckerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchMakerResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchNameResponse;
import com.bankMitra.model.bankenduserpanel.response.BranchSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Checkers;
import com.bankMitra.model.bankenduserpanel.response.CifRegistrationResponse;
import com.bankMitra.model.bankenduserpanel.response.CoApplicant;
import com.bankMitra.model.bankenduserpanel.response.ComercialCreditFacilityDetails;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceAuditProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantGurantorResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceCoApplicantResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceGeneralInfoResponse;
import com.bankMitra.model.bankenduserpanel.response.DueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.LoanSAResponse;
import com.bankMitra.model.bankenduserpanel.response.Makers;
import com.bankMitra.model.bankenduserpanel.response.NewDueDeligencePageResponse;
import com.bankMitra.model.bankenduserpanel.response.NewDueDeligenceProcessResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportHeaderResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingActionResponse;
import com.bankMitra.model.bankenduserpanel.response.ReportingTableData;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDM2M5Request;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDRequest;
import com.bankMitra.model.bankenduserpanel.response.SaveViewDDResponse;
import com.bankMitra.model.bankenduserpanel.response.UnitChecker;
import com.bankMitra.model.bankenduserpanel.response.ViewDueDeligenceResponse;
import com.bankMitra.model.clientManagement.request.BranchUserRequest;
import com.bankMitra.model.clientManagement.response.MovableProperty;
import com.bankMitra.model.reference.BorrowerType;
import com.bankMitra.model.reference.LoanVariant;
import com.bankMitra.model.response.MetaData;
import com.bankMitra.model.response.ResponseWrapperNoPagination;
import com.bankMitra.model.response.ResponseWrapperWithError;
import com.bankMitra.model.user.User;
import com.bankMitra.security.services.UserDetailsImpl;
import com.bankMitra.service.bankenduserpanel.InitiateDueDeligenceService;
import com.bankMitra.util.APIConstant;
import com.bankMitra.validator.InitiateAuditDueDeligenceValidator;
import com.bankMitra.validator.InitiateDueDeligenceValidator;
import com.google.common.io.ByteStreams;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
/**
 * @author Bank Maitra
 *
 */
@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/initiateDueDeligence")
public class InitiateDueDeligenceController {

	private static final Logger logger = LoggerFactory.getLogger(InitiateDueDeligenceController.class);
	@Autowired
	InitiateDueDeligenceService initiateDueDeligenceService;
	
	@Autowired
	private InitiateDueDeligenceValidator initiateDueDeligenceValidator;
	
	@Autowired
	private InitiateAuditDueDeligenceValidator initiateAuditDueDeligenceValidator;
	
	
	@ApiOperation(value = "Process Due Deligence", produces = "application/json")
	@ApiResponses(value = {
			@ApiResponse(code = 500, message = "Internal Server Error", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 401, message = "UnAuthorized resource", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 403, message = "Forbidden resource", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 404, message = "Not Found", response = ResponseWrapperWithError.class) })
	@RequestMapping(value = APIConstant.SERVICE_DUE_DELIGENCE_PROCESS, method = RequestMethod.POST, produces = "application/json")
	public ResponseWrapperNoPagination<DueDeligenceProcessResponse> processDueDeligence
	(@Valid @RequestBody DueDeligenceProcessRequest dueDeligenceProcessRequest,BindingResult result) throws APIException {
		initiateDueDeligenceValidator.validate(dueDeligenceProcessRequest, result);

		if (result.hasErrors()) {
			String errMsg = "";
			for(Object err :result.getAllErrors()) {
        		if(err instanceof ObjectError ) {
        			if(null!=((ObjectError)err).getDefaultMessage())
        				errMsg= errMsg + ((ObjectError)err).getDefaultMessage() + " , ";
        		} else
        			errMsg= errMsg + ((FieldError)err).getDefaultMessage() + " , ";
        	}
			throw new APIException(errMsg.substring(0,errMsg.lastIndexOf(",")));
		}
		UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    dueDeligenceProcessRequest.setCreatedBy(userName);
	    DueDeligenceProcessResponse dueDeligenceProcessResponse = initiateDueDeligenceService.processDueDeligence(dueDeligenceProcessRequest);
		if(null!=dueDeligenceProcessResponse && APIConstant.SUCCESS_CODE.equalsIgnoreCase(dueDeligenceProcessResponse.getMessageCode())) {
			return new ResponseWrapperNoPagination<>(new MetaData(true,dueDeligenceProcessResponse.getMessageDescription()),dueDeligenceProcessResponse);
		} else {
			throw new APIException(dueDeligenceProcessResponse.getMessageDescription());
		}
	}
	@ApiOperation(value = "Process Due Deligence for Audit process", produces = "application/json")
	@ApiResponses(value = {
			@ApiResponse(code = 500, message = "Internal Server Error", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 401, message = "UnAuthorized resource", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 403, message = "Forbidden resource", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 404, message = "Not Found", response = ResponseWrapperWithError.class) })
	@RequestMapping(value = APIConstant.SERVICE_DUE_DELIGENCE_AUDIT_PROCESS, method = RequestMethod.POST, produces = "application/json")
	public ResponseWrapperNoPagination<DueDeligenceAuditProcessResponse> processAuditDueDeligence
	(@Valid @RequestBody DueDeligenceAuditProcessRequest dueDeligenceProcessRequest,BindingResult result) throws APIException {
		initiateAuditDueDeligenceValidator.validate(dueDeligenceProcessRequest, result);

		if (result.hasErrors()) {
			String errMsg = "";
			for(Object err :result.getAllErrors()) {
        		if(err instanceof ObjectError ) {
        			if(null!=((ObjectError)err).getDefaultMessage())
        				errMsg= errMsg + ((ObjectError)err).getDefaultMessage() + " , ";
        		} else
        			errMsg= errMsg + ((FieldError)err).getDefaultMessage() + " , ";
        	}
			throw new APIException(errMsg.substring(0,errMsg.lastIndexOf(",")));
		}
		UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    dueDeligenceProcessRequest.setCreatedBy(userName);
	    DueDeligenceAuditProcessResponse dueDeligenceAuditProcessResponse = initiateDueDeligenceService.processAuditDueDeligence(dueDeligenceProcessRequest);
		if(null!=dueDeligenceAuditProcessResponse && APIConstant.SUCCESS_CODE.equalsIgnoreCase(dueDeligenceAuditProcessResponse.getMessageCode())) {
			return new ResponseWrapperNoPagination<>(new MetaData(true,dueDeligenceAuditProcessResponse.getMessageDescription()),dueDeligenceAuditProcessResponse);
		} else {
			throw new APIException(dueDeligenceAuditProcessResponse.getMessageDescription());
		}
	}
	
	@ApiOperation(value = "Intitate new Due Deligence", produces = "application/json")
	@ApiResponses(value = {
			@ApiResponse(code = 500, message = "Internal Server Error", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 401, message = "UnAuthorized resource", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 403, message = "Forbidden resource", response = ResponseWrapperWithError.class),
			@ApiResponse(code = 404, message = "Not Found", response = ResponseWrapperWithError.class) })
	@RequestMapping(value = APIConstant.SERVICE_NEW_DUE_DELIGENCE_PROCESS, method = RequestMethod.POST, produces = "application/json")
	public ResponseWrapperNoPagination<NewDueDeligenceProcessResponse> initiateNewDueDeligence
	(@Valid @RequestBody NewDueDeligenceProcessRequest dueDeligenceProcessRequest,BindingResult result) throws APIException {
		initiateDueDeligenceValidator.validate(dueDeligenceProcessRequest, result);

		if (result.hasErrors()) {
			String errMsg = "";
			for(Object err :result.getAllErrors()) {
        		if(err instanceof ObjectError ) {
        			if(null!=((ObjectError)err).getDefaultMessage())
        				errMsg= errMsg + ((ObjectError)err).getDefaultMessage() + " , ";
        		} else
        			errMsg= errMsg + ((FieldError)err).getDefaultMessage() + " , ";
        	}
			throw new APIException(errMsg.substring(0,errMsg.lastIndexOf(",")));
		}
		UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    dueDeligenceProcessRequest.setCreatedBy(userName);
	    NewDueDeligenceProcessResponse dueDeligenceProcessResponse = initiateDueDeligenceService.initiateNewDueDeligence(dueDeligenceProcessRequest);
		if(null!=dueDeligenceProcessResponse && APIConstant.SUCCESS_CODE.equalsIgnoreCase(dueDeligenceProcessResponse.getMessageCode())) {
			return new ResponseWrapperNoPagination<>(new MetaData(true,dueDeligenceProcessResponse.getMessageDescription()),dueDeligenceProcessResponse);
		} else {
			throw new APIException(dueDeligenceProcessResponse.getMessageDescription());
		}
	}

    @ApiOperation(value = "Get due deligence",produces = "application/json")
    @ApiResponses(value = {
            @ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    	}
    )
    @RequestMapping(value = APIConstant.SERVICE_CLIENT_DUE_DELIGENCE, method= RequestMethod.POST, produces = "application/json")
    public ResponseWrapperNoPagination<DueDeligenceProcessResponse> getNewDueDiligencePage(
    		@RequestBody DueDeligenceProcessRequest dueDeligenceRequest)
    		throws ResourceNotFoundException, APIException{
    	List<DueDeligenceProcessResponse> clientDueDeligenceList = null;
    	DueDeligenceProcessResponse dueDeligenceProcessResponse = null;
		clientDueDeligenceList = initiateDueDeligenceService.getNewDueDiligencePageDetails(dueDeligenceRequest);
		if(!CollectionUtils.isEmpty(clientDueDeligenceList))
			dueDeligenceProcessResponse = clientDueDeligenceList.get(0);
		else 
			dueDeligenceProcessResponse =  new DueDeligenceProcessResponse();
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved list of dueDeligence for client successfully"),dueDeligenceProcessResponse);
		
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_AUTO_GENERATED_DETAILS, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<AutoGeneratedResponse> getAutoGeneratedDetails(@RequestParam(value = "loanAppId",required=true)String loanAppId) throws APIException{
    	AutoGeneratedResponse autoGeneratedResponse = initiateDueDeligenceService.getAutoGeneratedDetails(loanAppId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved autoGeneratedResponse successfully"),autoGeneratedResponse);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_SAVE_ADMINISTRATIVE_DETAILS, method= RequestMethod.POST, produces = "application/json")
    public ResponseWrapperNoPagination<AdministrativeResponse> saveAdministrativeDetails(@RequestBody AdministrativeRequest adminRequest) throws APIException{
    	AdministrativeResponse adminResponse = initiateDueDeligenceService.saveAdministrativeDetails(adminRequest);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Saved AdministrativeDetails successfully"),adminResponse);
    }
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_UNIT_CHECKER, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<UnitChecker>> getListOfUnitChecker(@RequestParam(value = "clientGroupId",required=true)String clientGroupId) throws APIException{
        List<UnitChecker> checkerList = initiateDueDeligenceService.getListOfUnitChecker(clientGroupId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved unitChecker successfully"),checkerList);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_DEFAULT_UNIT_CHECKER, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<UnitChecker> getDefaultUnitChecker(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
        UnitChecker checker = initiateDueDeligenceService.getDefaultUnitChecker(e2eNum);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved DefaultUnitChecker successfully"),checker);
    }
    
    @RequestMapping(value = APIConstant.SERVICE_SAVE_DUE_DILIGENCE_GENERAL_INFO, method= RequestMethod.POST, produces = "application/json")
    public ResponseWrapperNoPagination<DueDeligenceGeneralInfoResponse> saveDueDiligenceGeneralInfo(
    		@RequestBody DueDeligenceGeneralInfoRequest dueDeligenceRequest)
    		throws ResourceNotFoundException, APIException{
    	DueDeligenceGeneralInfoResponse dueDiligenceGeneralInfo = null;
    	dueDiligenceGeneralInfo = initiateDueDeligenceService.saveDueDiligenceGeneralInfo(dueDeligenceRequest);
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Saved general info of due diligence successfully"),dueDiligenceGeneralInfo);
		
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_DUE_DILIGENCE_GENERAL_INFO, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<DueDeligenceGeneralInfoResponse> getDueDiligenceGeneralInfo(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	DueDeligenceGeneralInfoResponse generalInfo = initiateDueDeligenceService.getDueDiligenceGeneralInfo(e2eNum);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved general information of due diligence successfully"),generalInfo);
    }
    
    @RequestMapping(value = APIConstant.SERVICE_DUE_DILIGENCE_CO_APPLICANT, method= RequestMethod.POST, produces = "application/json")
    public ResponseWrapperNoPagination<DueDeligenceCoApplicantResponse> saveDueDiligenceCoApplicant(
    		@RequestBody DueDeligenceCoApplicantRequest dueDeligenceRequest)
    		throws ResourceNotFoundException, APIException{
    	DueDeligenceCoApplicantResponse dueDiligenceCoApplicant = null;
    	dueDiligenceCoApplicant = initiateDueDeligenceService.saveDueDiligenceCoApplicant(dueDeligenceRequest);
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Saved co applicant details of due diligence successfully"),dueDiligenceCoApplicant);
		
    }
    
    @RequestMapping(value = APIConstant.SERVICE_DUE_DILIGENCE_CO_APPLICANT, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<DueDeligenceCoApplicantRequest> getDueDiligenceCoApplicant(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	DueDeligenceCoApplicantRequest dueDiligenceCoApplicant = null;
    	logger.info("InitiateDueDeligenceController :: getDueDiligenceCoApplicant :: e2e no: {}",e2eNum);
    	if(!StringUtils.isEmpty(e2eNum)) {
    		dueDiligenceCoApplicant = initiateDueDeligenceService.getDueDiligenceCoApplicantDetails(e2eNum);
    		return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved co applicant details of due diligence successfully"),dueDiligenceCoApplicant);
    	}
    	throw new APIException("E2E number cannot be empty");		
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_DUE_DILIGENCE_COAPP_GURANTAR_INFO, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<List<DueDeligenceCoApplicantGurantorResponse>> getDueDiligenceGurantor(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	List<DueDeligenceCoApplicantGurantorResponse> gurantorReponseInfo = initiateDueDeligenceService.getDueDiligenceGurantor(e2eNum);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved gurantor information of due diligence successfully"),gurantorReponseInfo);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_DUE_DILIGENCE_COAPP_COLLATERAN_SECURITY, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<DueDeligenceCoApplicantResponse> getDueDiligenceCollateralSecurity(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	DueDeligenceCoApplicantResponse generalInfo = initiateDueDeligenceService.getDueDiligenceCollateralSecurity(e2eNum);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved general information of due diligence successfully"),generalInfo);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_DUE_DILIGENCE_MOVEABLE_PROP, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<List<MovableProperty>> getDueDiligenceMoveableProperty(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	List<MovableProperty> moveablePropertyByE2E = initiateDueDeligenceService.getDueDiligenceMoveableProperty(e2eNum);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved moveable property of due diligence successfully"),moveablePropertyByE2E);
    }
    
    @RequestMapping(value = APIConstant.SERVICE_VIEW_DUE_DILIGENCE_HEADER, method= RequestMethod.POST, produces = "application/json")
    public ResponseWrapperNoPagination<List<ViewDueDeligenceResponse>> viewDueDiligenceHeader(
    		@RequestBody ViewDueDeligenceRequest dueDeligenceRequest)
    		throws ResourceNotFoundException, APIException{
    	List<ViewDueDeligenceResponse> viewDueDeligenceResponse = initiateDueDeligenceService.viewDueDiligence(dueDeligenceRequest);
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved header for due diligence successfully"),viewDueDeligenceResponse);
		
    }
    
    @RequestMapping(value = APIConstant.SERVICE_VIEW_DETAILS_FOR_DUE_DILIGENCE_HEADER, method= RequestMethod.POST, produces = "application/json")
    public ResponseWrapperNoPagination<List<ViewDueDeligenceResponse>> viewDetailsForDueDiligence(
    		@RequestBody ViewDueDeligenceRequest dueDeligenceRequest)
    		throws ResourceNotFoundException, APIException{
    	List<ViewDueDeligenceResponse> viewDueDeligenceResponse = null;
    	if(null!=dueDeligenceRequest  && !StringUtils.isEmpty(dueDeligenceRequest.getHeaderKey())) {
    		String[] data = dueDeligenceRequest.getHeaderKey().split("_");
    		dueDeligenceRequest.setModuleName(data[0]);
    		dueDeligenceRequest.setDdSequence(Integer.parseInt(data[1]));
    		dueDeligenceRequest.setLoanAppId(String.valueOf(data[2]));
    		dueDeligenceRequest.setHeader1(data[3]);
    		dueDeligenceRequest.setHeader2(data[4]);
    		dueDeligenceRequest.setHeader3(data[5]);
    		dueDeligenceRequest.setHeader4(data[6]);
    	}
    	viewDueDeligenceResponse = initiateDueDeligenceService.viewDetailsForDueDiligence(dueDeligenceRequest);
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved details for due diligence successfully"),viewDueDeligenceResponse);
		
    }
    
    @ApiOperation(value = "Get list of audit firm maker",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_BRANCH_NAMES, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<BranchNameResponse>> getListOfBranchNames(@Valid @RequestBody BranchUserRequest branchUserRequest) throws APIException{
        List<BranchNameResponse> branchUserNameList = initiateDueDeligenceService.getListOfBranchNames(branchUserRequest.getClientId());
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved branchUserNameList successfully"),branchUserNameList);
    }
    
    @ApiOperation(value = "Get list of audit firm checker",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_AUDIT_FIRM_CHECKER, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<Checkers>> getListOfAuditFirmChecker(@Valid @RequestBody AuditFirmRequest auditFirmRequest) throws APIException{
        List<Checkers> checkerList = initiateDueDeligenceService.getListOfAuditFirmChecker(auditFirmRequest.getClientId());
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved checkerList successfully"),checkerList);
    }
    
    @ApiOperation(value = "Get list of audit firm maker",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_AUDIT_FIRM_MAKER, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<Makers>> getListOfAuditFirmMaker(@Valid @RequestBody AuditFirmRequest auditFirmRequest) throws APIException{
        List<Makers> makerList = initiateDueDeligenceService.getListOfAuditFirmMaker(auditFirmRequest.getClientId());
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved audit firm makers successfully"),makerList);
    }
    
    @ApiOperation(value = "Get list of loan schemes",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_LOAN_SCHEMES, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<LoanSchemeResponse>> getListOfLoanSchemes(@Valid @RequestBody LoanSchemeRequest loanSchemeRequest) throws APIException{
        List<LoanSchemeResponse> loanSchemeList = initiateDueDeligenceService.getListOfLoanSchemes(loanSchemeRequest);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved loan schemes successfully"),loanSchemeList);
    }
    
    @ApiOperation(value = "Get list of Loan Variants",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_LOAN_VARIANTS, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<LoanVariantResponse>> getListOfloanVariants(@Valid @RequestBody LoanVariant loanVariantRequest) throws APIException{
        List<LoanVariantResponse> loanVariantList = initiateDueDeligenceService.getListOfloanVariants(loanVariantRequest);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved Loan Variants successfully"),loanVariantList);
    }
    
    @ApiOperation(value = "Get list of account Types",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_ACCOUNT_TYPES, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<AccountType>> getListOfAccountTypes() throws APIException{
        List<AccountType> accountTypeList = initiateDueDeligenceService.getListOfAccountTypes();
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved List Of AccountTypes successfully"),accountTypeList);
    }

    @ApiOperation(value = "Get list of borrower category",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_BORROWER_CATEGORY, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<BorrowerCategory>> getListOfBorrowerCategory() throws APIException{
        List<BorrowerCategory> borrowerCategoryList = initiateDueDeligenceService.getListOfBorrowerCategory();
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved List Of Borrower Category successfully"),borrowerCategoryList);
    }

    @ApiOperation(value = "Get list of borrwer types",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_BORROWER_TYPES, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<BorrowerType>> getListOfBorrowerTypes() throws APIException{
        List<BorrowerType> borrowerTypeList = initiateDueDeligenceService.getListOfBorrowerTypes();
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved borrowerTypes successfully"),borrowerTypeList);
    }
    
    @ApiOperation(value = "Get list of loan schemes for facilities",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_LOAN_SCHEME_DROP_DOWN_FOR_FACILITIES, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<LoanVariantResponse>> getListOfLoanSchemeForFacilities(@Valid @RequestBody LoanSchemeRequest loanSchemeFacilitiesRequest) throws APIException{
    	UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    Integer clientId = user.getClientId();
	    loanSchemeFacilitiesRequest.setClientId(String.valueOf(clientId));
    	List<LoanVariantResponse> loanVariantList = initiateDueDeligenceService.getListOfLoanSchemeForFacilities(loanSchemeFacilitiesRequest);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved loanVariantList successfully"),loanVariantList);
    }
    
    @ApiOperation(value = "Get list of co applicant designation",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_COAPPLICANT_DESIGNATION, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<CoApplicant>> getListOfCoapplicantDesignation() throws APIException{
        List<CoApplicant> coApplicantList = initiateDueDeligenceService.getListOfCoapplicantDesignation();
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved coApplicantDesignations successfully"),coApplicantList);
    }
    
    @ApiOperation(value = "Get list of commercial credit facilities",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_COMMERCIAL_CREDIT_FACILITIES, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<ComercialCreditFacilityDetails>> getCommercialCreditFacilities(@Valid @RequestBody ComercialCreditFacilityRequest comercialCreditFacilityRequest) throws APIException{
        List<ComercialCreditFacilityDetails> commericalCreditFacilities = initiateDueDeligenceService.getCommercialCreditFacilities(comercialCreditFacilityRequest);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved ComercialCreditFacilityDetails successfully"),commericalCreditFacilities);
    }
    
    @ApiOperation(value = "Get list of CIF",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_CIF, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<List<CifRegistrationResponse>> getListOfCIF(@RequestParam(value = "clientId",required=true)String clientId) throws APIException{
        List<CifRegistrationResponse> listOfCIf = initiateDueDeligenceService.getListOfCIF(clientId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved list Of CIF successfully"),listOfCIf);
    }
    
    @ApiOperation(value = "Get list of branch maker",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_BRANCH_MAKER, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<List<BranchMakerResponse>> getBranchMaker(@RequestParam(value = "clientGroupId",required=true)Integer clientGroupId) throws APIException{
        List<BranchMakerResponse> listOfBranchMaker = initiateDueDeligenceService.getBranchMaker(clientGroupId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved list Of branch maker successfully"),listOfBranchMaker);
    }
    
    @ApiOperation(value = "Get list of branch checker",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_BRANCH_CHECKER, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<BranchCheckerResponse>> getBranchChecker(@RequestParam(value = "clientGroupId",required=true)Integer clientGroupId) throws APIException{
        List<BranchCheckerResponse> listOfBranchChecker = initiateDueDeligenceService.getBranchChecker(clientGroupId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved list Of branch checker successfully"),listOfBranchChecker);
    }
    
    @ApiOperation(value = "Get list of branch SA",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_BRANCH_SA, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<BranchSAResponse>> getBranchSA(@RequestParam(value = "clientGroupId",required=true)Integer clientGroupId) throws APIException{
        List<BranchSAResponse> listOfBranchSA = initiateDueDeligenceService.getBranchSA(clientGroupId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved list Of branch SA successfully"),listOfBranchSA);
    }
    
    @ApiOperation(value = "Get list of loan SA",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_LOAN_SA, method= RequestMethod.POST, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<LoanSAResponse>> getLoanSA(@RequestParam(value = "clientGroupId",required=true)Integer clientGroupId) throws APIException{
        List<LoanSAResponse> listOfLoanSA = initiateDueDeligenceService.getLoanSA(clientGroupId);
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved list Of loan SA successfully"),listOfLoanSA);
    }
    
    @ApiOperation(value = "Get list of movable properties",produces = "application/json")
    @ApiResponses(value = {
    		@ApiResponse(code = 500, message = "Internal Server Error",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 401, message = "UnAuthorized resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 403, message = "Forbidden resource",response=ResponseWrapperWithError.class),
            @ApiResponse(code = 404, message = "Not Found",response=ResponseWrapperWithError.class)
    }
    )
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_MOVABLE_PROPERTIES, method= RequestMethod.GET, produces = "application/json")
    //@PreAuthorize("hasRole('VIEW_ACCOUNT')")
    public ResponseWrapperNoPagination<List<MovableProperty>> getListOfMovableProperties() throws APIException{
        List<MovableProperty> movableProperties = initiateDueDeligenceService.getListOfMovableProperties();
        return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved movable properties successfully"),movableProperties);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_REPORTING_HEADERS, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<ReportHeaderResponse> getReportingHeader(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	logger.info("getReportingHeader :: e2eNumber :: {}", e2eNum);
    	ReportHeaderResponse reportingHeaderResponse = initiateDueDeligenceService.getReportingHeader(e2eNum);
    	return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved reporting headers successfully"),reportingHeaderResponse);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_REPORTING_ACTIONS, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<List<ReportingActionResponse>> getReportingAction(@RequestParam(value = "userName",required=true)String userName) throws APIException {
    	UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String username = user.getUserName();
	    logger.info("getReportingAction :: userName: {}",username);
    	List<ReportingActionResponse> reportingActionResponses = initiateDueDeligenceService.getReportingAction(username);
    	return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved reporting actions successfully"),reportingActionResponses);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_REPORTING_TABLE_DATA, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<List<ReportingTableData>> getReportingTableDataResource(@RequestParam(value = "e2eNum",required=true)String e2eNum) throws APIException{
    	logger.info("getReportingTableDataResource :: e2eNumber :: {}", e2eNum);
    	List<ReportingTableData> tableDatas = initiateDueDeligenceService.getReportTableDataService(e2eNum);
    	return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved reporting table data successfully"),tableDatas);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GET_RISK_TYPE, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<Integer> getRiskType() throws APIException {
    	UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    logger.info("getRiskType :: username: {}, :: clientId: {}",userName, user.getClientId());
	    Integer riskTypeId = initiateDueDeligenceService.getRiskTypeId(user.getClientId());
	    logger.info("Risk Type Id {}", riskTypeId);
	    return new ResponseWrapperNoPagination<>(new MetaData(true,"Retrieved Risk Type Id"),riskTypeId);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_UPDATE_REPORTING_STATUS, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<String> updateReportStatus(@RequestParam(value = "e2eNum",required=true)String e2eNum, @RequestParam(value = "actionId",required=true)Integer actionId) throws APIException {
    	UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    logger.info("updateReportStatus :: username: {}, :: e2eNum: {} :: actionId: {}",userName, e2eNum, actionId);
	    String status = initiateDueDeligenceService.updateReportStatus(userName, e2eNum, actionId);
	    logger.info("update status {}", status);
	    return new ResponseWrapperNoPagination<>(new MetaData(true,"Updated successfully"),status);
    }
    
    @ResponseStatus(HttpStatus.OK)
    @RequestMapping(value = APIConstant.SERVICE_GENERATE_REPORT, method= RequestMethod.GET, produces = "application/json")
    public ResponseWrapperNoPagination<String> generateReport(@RequestParam(value = "e2eNum",required=true)String e2eNum, 
    		@RequestParam(value = "rowName",required=true)String rowName, @RequestParam(value = "columnName",required=true)String columnName) throws APIException {
    	logger.info("generateReport :: e2eNum: {}, :: rowName: {} :: columnName: {}",e2eNum, rowName, columnName);
    	String generatedFileName=initiateDueDeligenceService.generateReportService(e2eNum, rowName, columnName);
    	logger.info("generateReport :: fileName {}", generatedFileName);
	    return new ResponseWrapperNoPagination<>(new MetaData(true,"generated successfully"),generatedFileName);
    }
    
	@RequestMapping(value = APIConstant.SERVICE_DOWNLOAD_REPORT, method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	public @ResponseBody ResponseEntity<byte[]> getFile(
			@RequestParam(value = "fileName", required = true) String fileName) throws IOException {
		byte[] content = contentOf(fileName);
		HttpHeaders httpHeader = new HttpHeaders();
		httpHeader.setContentType(MediaType.parseMediaType("application/octet-stream"));
		httpHeader.setContentDispositionFormData("filename", fileName);
		return new ResponseEntity<>(content, httpHeader, HttpStatus.OK);
	}
	
	private byte[] contentOf(String fileName) throws IOException {
		String directory = "";
		logger.info("InitiateDueDeligenceController :: contentOf :: downloaded directory: {}",directory);
    	Path filePath = get(directory).normalize().resolve(fileName);
    	logger.info("InitiateDueDeligenceController :: contentOf :: downloaded filePath: {}",filePath);
        if(!Files.exists(filePath)) {
            throw new FileNotFoundException(fileName + " was not found on the server");
        }
    	return Files.readAllBytes(Paths.get(filePath.toUri()));
    }
	
	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(value = APIConstant.SERVICE_SAVE_VIEW_DD, method = RequestMethod.POST, produces = "application/json")
	public ResponseWrapperNoPagination<SaveViewDDResponse> saveViewDD
	(@Valid @RequestBody SaveViewDDRequest saveViewDDRequest) throws APIException {
		UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    saveViewDDRequest.setUserName(userName);
		SaveViewDDResponse saveResponse = initiateDueDeligenceService.saveViewDD(saveViewDDRequest);
		logger.info("InitiateDueDeligenceController::saveViewDD::response "+ saveResponse);
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Saved View DD successfully"),saveResponse);
	}
	
	@ResponseStatus(HttpStatus.OK)
	@RequestMapping(value = APIConstant.SERVICE_SAVE_VIEW_DD_M2_M5, method = RequestMethod.POST, produces = "application/json")
	public ResponseWrapperNoPagination<SaveViewDDResponse> saveViewDD_M2_M5
	(@Valid @RequestBody SaveViewDDM2M5Request saveViewDDM2M5Request) throws APIException {
		UserDetailsImpl user = (UserDetailsImpl)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    String userName = user.getUserName();
	    saveViewDDM2M5Request.setUserName(userName);
		SaveViewDDResponse saveResponse = initiateDueDeligenceService.saveViewDD_M2_M5(saveViewDDM2M5Request);
		logger.info("InitiateDueDeligenceController::saveViewDD::response "+ saveResponse);
		return new ResponseWrapperNoPagination<>(new MetaData(true,"Saved View DD successfully"),saveResponse);
	}
}